{"version":3,"file":"84b52f92c08846a38b42.js","mappings":"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","sources":["webpack://react-data-grid/website/demos/HeaderFilters.tsx"],"sourcesContent":["import { createContext, useContext, useMemo, useState } from 'react';\nimport faker from 'faker';\nimport { css } from '@linaria/core';\n\nimport DataGrid from '../../src';\nimport type { Column } from '../../src';\nimport type { HeaderRendererProps, Omit } from '../../src/types';\nimport { useFocusRef } from '../../src/hooks';\n\nconst rootClassname = css`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  gap: 10px;\n\n  > .rdg {\n    flex: 1;\n  }\n`;\n\nconst toolbarClassname = css`\n  text-align: end;\n`;\n\nconst filterColumnClassName = 'filter-cell';\n\nconst filterContainerClassname = css`\n  .${filterColumnClassName} {\n    line-height: 35px;\n    padding: 0;\n\n    > div {\n      padding: 0 8px;\n\n      &:first-child {\n        border-bottom: 1px solid var(--border-color);\n      }\n    }\n  }\n`;\n\nconst filterClassname = css`\n  width: 100%;\n  padding: 4px;\n  font-size: 14px;\n`;\n\ninterface Row {\n  id: number;\n  task: string;\n  priority: string;\n  issueType: string;\n  developer: string;\n  complete: number;\n}\n\ninterface Filter extends Omit<Row, 'id' | 'complete'> {\n  complete: number | undefined;\n  enabled: boolean;\n}\n\n// Context is needed to read filter values otherwise columns are\n// re-created when filters are changed and filter loses focus\nconst FilterContext = createContext<Filter | undefined>(undefined);\n\nfunction inputStopPropagation(event: React.KeyboardEvent<HTMLInputElement>) {\n  if (['ArrowLeft', 'ArrowRight'].includes(event.key)) {\n    event.stopPropagation();\n  }\n}\n\nfunction selectStopPropagation(event: React.KeyboardEvent<HTMLSelectElement>) {\n  if (['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'].includes(event.key)) {\n    event.stopPropagation();\n  }\n}\n\nexport default function HeaderFilters() {\n  const [rows] = useState(createRows);\n  const [filters, setFilters] = useState<Filter>({\n    task: '',\n    priority: 'Critical',\n    issueType: 'All',\n    developer: '',\n    complete: undefined,\n    enabled: true\n  });\n\n  const developerOptions = useMemo(\n    () =>\n      Array.from(new Set(rows.map((r) => r.developer))).map((d) => ({\n        label: d,\n        value: d\n      })),\n    [rows]\n  );\n\n  const columns = useMemo((): readonly Column<Row>[] => {\n    return [\n      {\n        key: 'id',\n        name: 'ID',\n        width: 50\n      },\n      {\n        key: 'task',\n        name: 'Title',\n        headerCellClass: filterColumnClassName,\n        headerRenderer: (p) => (\n          <FilterRenderer<Row, unknown, HTMLInputElement> {...p}>\n            {({ filters, ...rest }) => (\n              <input\n                {...rest}\n                className={filterClassname}\n                value={filters.task}\n                onChange={(e) =>\n                  setFilters({\n                    ...filters,\n                    task: e.target.value\n                  })\n                }\n                onKeyDown={inputStopPropagation}\n              />\n            )}\n          </FilterRenderer>\n        )\n      },\n      {\n        key: 'priority',\n        name: 'Priority',\n        headerCellClass: filterColumnClassName,\n        headerRenderer: (p) => (\n          <FilterRenderer<Row, unknown, HTMLSelectElement> {...p}>\n            {({ filters, ...rest }) => (\n              <select\n                {...rest}\n                className={filterClassname}\n                value={filters.priority}\n                onChange={(e) =>\n                  setFilters({\n                    ...filters,\n                    priority: e.target.value\n                  })\n                }\n                onKeyDown={selectStopPropagation}\n              >\n                <option value=\"All\">All</option>\n                <option value=\"Critical\">Critical</option>\n                <option value=\"High\">High</option>\n                <option value=\"Medium\">Medium</option>\n                <option value=\"Low\">Low</option>\n              </select>\n            )}\n          </FilterRenderer>\n        )\n      },\n      {\n        key: 'issueType',\n        name: 'Issue Type',\n        headerCellClass: filterColumnClassName,\n        headerRenderer: (p) => (\n          <FilterRenderer<Row, unknown, HTMLSelectElement> {...p}>\n            {({ filters, ...rest }) => (\n              <select\n                {...rest}\n                className={filterClassname}\n                value={filters.issueType}\n                onChange={(e) =>\n                  setFilters({\n                    ...filters,\n                    issueType: e.target.value\n                  })\n                }\n                onKeyDown={selectStopPropagation}\n              >\n                <option value=\"All\">All</option>\n                <option value=\"Bug\">Bug</option>\n                <option value=\"Improvement\">Improvement</option>\n                <option value=\"Epic\">Epic</option>\n                <option value=\"Story\">Story</option>\n              </select>\n            )}\n          </FilterRenderer>\n        )\n      },\n      {\n        key: 'developer',\n        name: 'Developer',\n        headerCellClass: filterColumnClassName,\n        headerRenderer: (p) => (\n          <FilterRenderer<Row, unknown, HTMLInputElement> {...p}>\n            {({ filters, ...rest }) => (\n              <>\n                <input\n                  {...rest}\n                  className={filterClassname}\n                  value={filters.developer}\n                  onChange={(e) =>\n                    setFilters({\n                      ...filters,\n                      developer: e.target.value\n                    })\n                  }\n                  onKeyDown={inputStopPropagation}\n                  list=\"developers\"\n                />\n              </>\n            )}\n          </FilterRenderer>\n        )\n      },\n      {\n        key: 'complete',\n        name: '% Complete',\n        headerCellClass: filterColumnClassName,\n        headerRenderer: (p) => (\n          <FilterRenderer<Row, unknown, HTMLInputElement> {...p}>\n            {({ filters, ...rest }) => (\n              <input\n                {...rest}\n                type=\"number\"\n                className={filterClassname}\n                value={filters.complete}\n                onChange={(e) =>\n                  setFilters({\n                    ...filters,\n                    complete: Number.isFinite(e.target.valueAsNumber)\n                      ? e.target.valueAsNumber\n                      : undefined\n                  })\n                }\n                onKeyDown={inputStopPropagation}\n              />\n            )}\n          </FilterRenderer>\n        )\n      }\n    ];\n  }, []);\n\n  const filteredRows = useMemo(() => {\n    return rows.filter((r) => {\n      return (\n        (filters.task ? r.task.includes(filters.task) : true) &&\n        (filters.priority !== 'All' ? r.priority === filters.priority : true) &&\n        (filters.issueType !== 'All' ? r.issueType === filters.issueType : true) &&\n        (filters.developer\n          ? r.developer.toLowerCase().startsWith(filters.developer.toLowerCase())\n          : true) &&\n        (filters.complete !== undefined ? r.complete >= filters.complete : true)\n      );\n    });\n  }, [rows, filters]);\n\n  function clearFilters() {\n    setFilters({\n      task: '',\n      priority: 'All',\n      issueType: 'All',\n      developer: '',\n      complete: undefined,\n      enabled: true\n    });\n  }\n\n  function toggleFilters() {\n    setFilters((filters) => ({\n      ...filters,\n      enabled: !filters.enabled\n    }));\n  }\n\n  return (\n    <div className={rootClassname}>\n      <div className={toolbarClassname}>\n        <button type=\"button\" onClick={toggleFilters}>\n          Toggle Filters\n        </button>{' '}\n        <button type=\"button\" onClick={clearFilters}>\n          Clear Filters\n        </button>\n      </div>\n      <FilterContext.Provider value={filters}>\n        <DataGrid\n          className={filters.enabled ? filterContainerClassname : undefined}\n          columns={columns}\n          rows={filteredRows}\n          headerRowHeight={filters.enabled ? 70 : undefined}\n        />\n      </FilterContext.Provider>\n      <datalist id=\"developers\">\n        {developerOptions.map(({ label, value }) => (\n          <option key={value} value={value}>\n            {label}\n          </option>\n        ))}\n      </datalist>\n    </div>\n  );\n}\n\nfunction FilterRenderer<R, SR, T extends HTMLOrSVGElement>({\n  isCellSelected,\n  column,\n  children\n}: HeaderRendererProps<R, SR> & {\n  children: (args: {\n    ref: React.RefObject<T>;\n    tabIndex: number;\n    filters: Filter;\n  }) => React.ReactElement;\n}) {\n  const filters = useContext(FilterContext)!;\n  const { ref, tabIndex } = useFocusRef<T>(isCellSelected);\n\n  return (\n    <>\n      <div>{column.name}</div>\n      {filters.enabled && <div>{children({ ref, tabIndex, filters })}</div>}\n    </>\n  );\n}\n\nfunction createRows() {\n  const rows: Row[] = [];\n  for (let i = 1; i < 500; i++) {\n    rows.push({\n      id: i,\n      task: `Task ${i}`,\n      complete: Math.min(100, Math.round(Math.random() * 110)),\n      priority: ['Critical', 'High', 'Medium', 'Low'][Math.floor(Math.random() * 4)],\n      issueType: ['Bug', 'Improvement', 'Epic', 'Story'][Math.floor(Math.random() * 4)],\n      developer: faker.name.findName()\n    });\n  }\n  return rows;\n}\n"],"names":["filterColumnClassName","filterClassname","FilterContext","createContext","inputStopPropagation","event","includes","selectStopPropagation","HeaderFilters","rows","useState","filters","setFilters","task","priority","issueType","developer","complete","enabled","developerOptions","useMemo","Array","Set","r","d","label","value","columns","key","name","width","headerCellClass","headerRenderer","p","rest","className","onChange","e","onKeyDown","list","type","Number","undefined","filteredRows","onClick","headerRowHeight","id","FilterRenderer","children","useContext","tabIndex","useFocusRef","column","createRows","i","Math","faker"],"sourceRoot":""}