{"version":3,"file":"01621934f9c77e1af5f3.js","mappings":"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","sources":["webpack://react-data-grid/website/demos/components/Formatters/ChildRowDeleteButton.tsx","webpack://react-data-grid/./website/demos/TreeView.tsx","webpack://react-data-grid/website/demos/components/Formatters/CellExpanderFormatter.tsx","webpack://react-data-grid/./node_modules/clsx/dist/clsx.m.js"],"sourcesContent":["import { css } from '@linaria/core';\nimport { useFocusRef } from '../../../../src/hooks';\n\nconst childRowActionCrossClassname = css`\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n    background: grey;\n  }\n\n  &::before {\n    left: 21px;\n    width: 1px;\n    height: 100%;\n  }\n\n  &::after {\n    top: 50%;\n    left: 20px;\n    height: 1px;\n    width: 15px;\n  }\n\n  &:hover {\n    background: red;\n  }\n`;\n\nconst childRowButtonClassname = css`\n  cursor: pointer;\n  position: absolute;\n  left: 21px;\n  transform: translateX(-50%);\n  filter: grayscale(1);\n`;\n\ninterface ChildRowDeleteButtonProps {\n  isCellSelected: boolean;\n  isDeleteSubRowEnabled: boolean;\n  onDeleteSubRow: () => void;\n}\n\nexport function ChildRowDeleteButton({\n  isCellSelected,\n  onDeleteSubRow,\n  isDeleteSubRowEnabled\n}: ChildRowDeleteButtonProps) {\n  const { ref, tabIndex } = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown(e: React.KeyboardEvent<HTMLSpanElement>) {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      onDeleteSubRow();\n    }\n  }\n\n  return (\n    <>\n      <div className={childRowActionCrossClassname} />\n      {isDeleteSubRowEnabled && (\n        <div className={childRowButtonClassname} onClick={onDeleteSubRow}>\n          <span ref={ref} tabIndex={tabIndex} onKeyDown={handleKeyDown}>\n            ‚ùå\n          </span>\n        </div>\n      )}\n    </>\n  );\n}\n","import { useState, useReducer, useMemo } from 'react';\n\nimport DataGrid from '../../src';\nimport type { Column } from '../../src';\nimport { CellExpanderFormatter, ChildRowDeleteButton } from './components/Formatters';\n\ninterface Row {\n  id: string;\n  name: string;\n  format: string;\n  position: string;\n  price: number;\n  children?: Row[];\n  parentId?: string;\n  isExpanded?: boolean;\n}\n\ninterface Action {\n  type: 'toggleSubRow' | 'deleteSubRow';\n  id: string;\n}\n\nfunction createRows(): Row[] {\n  const rows = [];\n  for (let i = 0; i < 100; i++) {\n    const price = Math.random() * 30;\n    const id = `row${i}`;\n    const row: Row = {\n      id,\n      name: `supplier ${i}`,\n      format: `package ${i}`,\n      position: 'Run of site',\n      price,\n      children: [\n        {\n          id: `${id}-0`,\n          parentId: id,\n          name: `supplier ${i}`,\n          format: '728x90',\n          position: 'run of site',\n          price: price / 2\n        },\n        {\n          id: `${id}-1`,\n          parentId: id,\n          name: `supplier ${i}`,\n          format: '480x600',\n          position: 'run of site',\n          price: price * 0.25\n        },\n        {\n          id: `${id}-2`,\n          parentId: id,\n          name: `supplier ${i}`,\n          format: '328x70',\n          position: 'run of site',\n          price: price * 0.25\n        }\n      ],\n      isExpanded: false\n    };\n    rows.push(row);\n  }\n  return rows;\n}\n\nfunction toggleSubRow(rows: Row[], id: string): Row[] {\n  const rowIndex = rows.findIndex((r) => r.id === id);\n  const row = rows[rowIndex];\n  const { children } = row;\n  if (!children) return rows;\n\n  const newRows = [...rows];\n  newRows[rowIndex] = { ...row, isExpanded: !row.isExpanded };\n  if (!row.isExpanded) {\n    newRows.splice(rowIndex + 1, 0, ...children);\n  } else {\n    newRows.splice(rowIndex + 1, children.length);\n  }\n  return newRows;\n}\n\nfunction deleteSubRow(rows: Row[], id: string): Row[] {\n  const row = rows.find((r) => r.id === id);\n  if (!row || !row.parentId) return rows;\n\n  // Remove sub row from flattened rows.\n  const newRows = rows.filter((r) => r.id !== id);\n\n  // Remove sub row from parent row.\n  const parentRowIndex = newRows.findIndex((r) => r.id === row.parentId);\n  const { children } = newRows[parentRowIndex];\n  if (children) {\n    const newChildren = children.filter((sr) => sr.id !== id);\n    newRows[parentRowIndex] = { ...newRows[parentRowIndex], children: newChildren };\n  }\n\n  return newRows;\n}\n\nfunction reducer(rows: Row[], { type, id }: Action): Row[] {\n  switch (type) {\n    case 'toggleSubRow':\n      return toggleSubRow(rows, id);\n    case 'deleteSubRow':\n      return deleteSubRow(rows, id);\n    default:\n      return rows;\n  }\n}\n\nconst defaultRows = createRows();\n\nexport default function TreeView() {\n  const [rows, dispatch] = useReducer(reducer, defaultRows);\n  const [allowDelete, setAllowDelete] = useState(true);\n  const columns: Column<Row>[] = useMemo(() => {\n    return [\n      {\n        key: 'id',\n        name: 'id',\n        frozen: true\n      },\n      {\n        key: 'name',\n        name: 'Name'\n      },\n      {\n        key: 'format',\n        name: 'format',\n        formatter({ row, isCellSelected }) {\n          const hasChildren = row.children !== undefined;\n          const style = !hasChildren ? { marginLeft: 30 } : undefined;\n          return (\n            <>\n              {hasChildren && (\n                <CellExpanderFormatter\n                  isCellSelected={isCellSelected}\n                  expanded={row.isExpanded === true}\n                  onCellExpand={() => dispatch({ id: row.id, type: 'toggleSubRow' })}\n                />\n              )}\n              <div className=\"rdg-cell-value\">\n                {!hasChildren && (\n                  <ChildRowDeleteButton\n                    isCellSelected={isCellSelected}\n                    isDeleteSubRowEnabled={allowDelete}\n                    onDeleteSubRow={() => dispatch({ id: row.id, type: 'deleteSubRow' })}\n                  />\n                )}\n                <div style={style}>{row.format}</div>\n              </div>\n            </>\n          );\n        }\n      },\n      {\n        key: 'position',\n        name: 'position'\n      },\n      {\n        key: 'price',\n        name: 'price'\n      }\n    ];\n  }, [allowDelete]);\n\n  return (\n    <>\n      <label>\n        Allow Delete\n        <input\n          type=\"checkbox\"\n          checked={allowDelete}\n          onChange={() => setAllowDelete(!allowDelete)}\n        />\n      </label>\n      <DataGrid columns={columns} rows={rows} className=\"big-grid\" />\n    </>\n  );\n}\n","import { css } from '@linaria/core';\nimport { useFocusRef } from '../../../../src/hooks';\n\nconst cellExpandClassname = css`\n  float: right;\n  display: table;\n  height: 100%;\n\n  > span {\n    display: table-cell;\n    vertical-align: middle;\n    cursor: pointer;\n  }\n`;\n\ninterface CellExpanderFormatterProps {\n  isCellSelected: boolean;\n  expanded: boolean;\n  onCellExpand: () => void;\n}\n\nexport function CellExpanderFormatter({\n  isCellSelected,\n  expanded,\n  onCellExpand\n}: CellExpanderFormatterProps) {\n  const { ref, tabIndex } = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown(e: React.KeyboardEvent<HTMLSpanElement>) {\n    if (e.key === ' ' || e.key === 'Enter') {\n      e.preventDefault();\n      onCellExpand();\n    }\n  }\n\n  return (\n    <div className={cellExpandClassname}>\n      <span onClick={onCellExpand} onKeyDown={handleKeyDown}>\n        <span ref={ref} tabIndex={tabIndex}>\n          {expanded ? '\\u25BC' : '\\u25B6'}\n        </span>\n      </span>\n    </div>\n  );\n}\n","function toVal(mix) {\n\tvar k, y, str='';\n\n\tif (typeof mix === 'string' || typeof mix === 'number') {\n\t\tstr += mix;\n\t} else if (typeof mix === 'object') {\n\t\tif (Array.isArray(mix)) {\n\t\t\tfor (k=0; k < mix.length; k++) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tif (y = toVal(mix[k])) {\n\t\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\t\tstr += y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (k in mix) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\tstr += k;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn str;\n}\n\nexport default function () {\n\tvar i=0, tmp, x, str='';\n\twhile (i < arguments.length) {\n\t\tif (tmp = arguments[i++]) {\n\t\t\tif (x = toVal(tmp)) {\n\t\t\t\tstr && (str += ' ');\n\t\t\t\tstr += x\n\t\t\t}\n\t\t}\n\t}\n\treturn str;\n}\n"],"names":["ChildRowDeleteButton","isDeleteSubRowEnabled","tabIndex","useFocusRef","className","onClick","ref","onKeyDown","e","onDeleteSubRow","reducer","rows","type","id","rowIndex","findIndex","r","row","children","newRows","isExpanded","splice","length","toggleSubRow","find","parentId","filter","parentRowIndex","newChildren","sr","deleteSubRow","defaultRows","i","price","Math","random","name","format","position","push","createRows","TreeView","dispatch","useReducer","allowDelete","setAllowDelete","useState","columns","useMemo","key","frozen","formatter","isCellSelected","hasChildren","undefined","style","marginLeft","CellExpanderFormatter","expanded","onCellExpand","checked","onChange","DataGrid","toVal","mix","k","y","str","Array","isArray","tmp","x","arguments"],"sourceRoot":""}