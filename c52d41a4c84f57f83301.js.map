{"version":3,"file":"c52d41a4c84f57f83301.js","mappings":"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","sources":["webpack://react-data-grid/./src/Columns.tsx","webpack://react-data-grid/./src/formatters/ValueFormatter.tsx","webpack://react-data-grid/src/formatters/ToggleGroupFormatter.tsx","webpack://react-data-grid/./src/hooks/useCalculatedColumns.ts","webpack://react-data-grid/src/HeaderCell.tsx","webpack://react-data-grid/src/HeaderRow.tsx","webpack://react-data-grid/./src/GroupCell.tsx","webpack://react-data-grid/src/GroupRow.tsx","webpack://react-data-grid/./src/SummaryCell.tsx","webpack://react-data-grid/src/SummaryRow.tsx","webpack://react-data-grid/src/EditCell.tsx","webpack://react-data-grid/src/DragHandle.tsx","webpack://react-data-grid/./src/utils/keyboardUtils.ts","webpack://react-data-grid/./src/DataGrid.tsx","webpack://react-data-grid/./src/hooks/useGridDimensions.ts","webpack://react-data-grid/./src/hooks/useViewportRows.ts","webpack://react-data-grid/./src/hooks/useViewportColumns.ts","webpack://react-data-grid/src/style/core.ts","webpack://react-data-grid/src/Cell.tsx","webpack://react-data-grid/./src/Row.tsx","webpack://react-data-grid/src/formatters/SelectCellFormatter.tsx","webpack://react-data-grid/src/headerCells/SortableHeaderCell.tsx","webpack://react-data-grid/./src/hooks/useCombinedRefs.ts","webpack://react-data-grid/./src/hooks/useFocusRef.ts","webpack://react-data-grid/./src/hooks/useLatestFunc.ts","webpack://react-data-grid/./src/hooks/useLayoutEffect.ts","webpack://react-data-grid/./src/hooks/useRovingCellRef.ts","webpack://react-data-grid/src/hooks/useRovingRowRef.ts","webpack://react-data-grid/./src/hooks/useRowSelection.ts","webpack://react-data-grid/src/style/row.ts","webpack://react-data-grid/./src/utils/colSpanUtils.ts","webpack://react-data-grid/./src/utils/domUtils.ts","webpack://react-data-grid/./src/utils/index.ts","webpack://react-data-grid/src/style/cell.ts","webpack://react-data-grid/./src/utils/selectedCellUtils.ts"],"sourcesContent":["import { SelectCellFormatter } from './formatters';\nimport { useRowSelection } from './hooks/useRowSelection';\nimport type { Column, FormatterProps, GroupFormatterProps } from './types';\nimport { stopPropagation } from './utils';\n\nexport const SELECT_COLUMN_KEY = 'select-row';\n\nfunction SelectFormatter(props: FormatterProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select\"\n      isCellSelected={props.isCellSelected}\n      value={isRowSelected}\n      onClick={stopPropagation}\n      onChange={(checked, isShiftClick) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick });\n      }}\n    />\n  );\n}\n\nfunction SelectGroupFormatter(props: GroupFormatterProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select Group\"\n      isCellSelected={props.isCellSelected}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick: false });\n      }}\n      // Stop propagation to prevent row selection\n      onClick={stopPropagation}\n    />\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  headerRenderer(props) {\n    return (\n      <SelectCellFormatter\n        aria-label=\"Select All\"\n        isCellSelected={props.isCellSelected}\n        value={props.allRowsSelected}\n        onChange={props.onAllRowsSelectionChange}\n        // Stop propagation to prevent row selection\n        onClick={stopPropagation}\n      />\n    );\n  },\n  formatter: SelectFormatter,\n  groupFormatter: SelectGroupFormatter\n};\n","import type { FormatterProps } from '../types';\n\nexport function ValueFormatter<R, SR>(props: FormatterProps<R, SR>) {\n  try {\n    return <>{props.row[props.column.key as keyof R]}</>;\n  } catch {\n    return null;\n  }\n}\n","import { css } from '@linaria/core';\nimport type { GroupFormatterProps } from '../types';\nimport { useFocusRef } from '../hooks/useFocusRef';\n\nconst groupCellContent = css`\n  outline: none;\n`;\n\nconst groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`;\n\nconst caret = css`\n  margin-left: 4px;\n  stroke: currentColor;\n  stroke-width: 1.5px;\n  fill: transparent;\n  vertical-align: middle;\n\n  > path {\n    transition: d 0.1s;\n  }\n`;\n\nconst caretClassname = `rdg-caret ${caret}`;\n\nexport function ToggleGroupFormatter<R, SR>({\n  groupKey,\n  isExpanded,\n  isCellSelected,\n  toggleGroup\n}: GroupFormatterProps<R, SR>) {\n  const { ref, tabIndex } = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown({ key }: React.KeyboardEvent<HTMLSpanElement>) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n\n  return (\n    <span\n      ref={ref}\n      className={groupCellContentClassname}\n      tabIndex={tabIndex}\n      onKeyDown={handleKeyDown}\n    >\n      {groupKey}\n      <svg viewBox=\"0 0 14 8\" width=\"14\" height=\"8\" className={caretClassname} aria-hidden>\n        <path d={d} />\n      </svg>\n    </span>\n  );\n}\n","import { useMemo } from 'react';\n\nimport type { CalculatedColumn, Column, Maybe } from '../types';\nimport type { DataGridProps } from '../DataGrid';\nimport { ValueFormatter, ToggleGroupFormatter } from '../formatters';\nimport { SELECT_COLUMN_KEY } from '../Columns';\nimport { floor, max, min } from '../utils';\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\ninterface ColumnMetric {\n  width: number;\n  left: number;\n}\n\ninterface CalculatedColumnsArgs<R, SR> extends Pick<DataGridProps<R, SR>, 'defaultColumnOptions'> {\n  rawColumns: readonly Column<R, SR>[];\n  rawGroupBy: Maybe<readonly string[]>;\n  viewportWidth: number;\n  scrollLeft: number;\n  columnWidths: ReadonlyMap<string, number>;\n  enableVirtualization: boolean;\n}\n\nexport function useCalculatedColumns<R, SR>({\n  rawColumns,\n  columnWidths,\n  viewportWidth,\n  scrollLeft,\n  defaultColumnOptions,\n  rawGroupBy,\n  enableVirtualization\n}: CalculatedColumnsArgs<R, SR>) {\n  const minColumnWidth = defaultColumnOptions?.minWidth ?? 80;\n  const defaultFormatter = defaultColumnOptions?.formatter ?? ValueFormatter;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n\n  const { columns, colSpanColumns, lastFrozenColumnIndex, groupBy } = useMemo((): {\n    columns: readonly CalculatedColumn<R, SR>[];\n    colSpanColumns: readonly CalculatedColumn<R, SR>[];\n    lastFrozenColumnIndex: number;\n    groupBy: readonly string[];\n  } => {\n    // Filter rawGroupBy and ignore keys that do not match the columns prop\n    const groupBy: string[] = [];\n    let lastFrozenColumnIndex = -1;\n\n    const columns = rawColumns.map((rawColumn) => {\n      const rowGroup = rawGroupBy?.includes(rawColumn.key) ?? false;\n      // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n      const frozen = rowGroup || rawColumn.frozen || false;\n\n      const column: Mutable<CalculatedColumn<R, SR>> = {\n        ...rawColumn,\n        idx: 0,\n        frozen,\n        isLastFrozenColumn: false,\n        rowGroup,\n        sortable: rawColumn.sortable ?? defaultSortable,\n        resizable: rawColumn.resizable ?? defaultResizable,\n        formatter: rawColumn.formatter ?? defaultFormatter\n      };\n\n      if (rowGroup) {\n        column.groupFormatter ??= ToggleGroupFormatter;\n      }\n\n      if (frozen) {\n        lastFrozenColumnIndex++;\n      }\n\n      return column;\n    });\n\n    columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort grouped columns second, following the groupBy order:\n      if (rawGroupBy?.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n        return -1;\n      }\n      if (rawGroupBy?.includes(bKey)) return 1;\n\n      // Sort frozen columns third:\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const colSpanColumns: CalculatedColumn<R, SR>[] = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n\n      if (column.rowGroup) {\n        groupBy.push(column.key);\n      }\n\n      if (column.colSpan != null) {\n        colSpanColumns.push(column);\n      }\n    });\n\n    if (lastFrozenColumnIndex !== -1) {\n      columns[lastFrozenColumnIndex].isLastFrozenColumn = true;\n    }\n\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex,\n      groupBy\n    };\n  }, [rawColumns, defaultFormatter, defaultResizable, defaultSortable, rawGroupBy]);\n\n  const { layoutCssVars, totalColumnWidth, totalFrozenColumnWidth, columnMetrics } = useMemo((): {\n    layoutCssVars: Readonly<Record<string, string>>;\n    totalColumnWidth: number;\n    totalFrozenColumnWidth: number;\n    columnMetrics: ReadonlyMap<CalculatedColumn<R, SR>, ColumnMetric>;\n  } => {\n    const columnMetrics = new Map<CalculatedColumn<R, SR>, ColumnMetric>();\n    let left = 0;\n    let totalColumnWidth = 0;\n    let totalFrozenColumnWidth = 0;\n    let templateColumns = '';\n    let allocatedWidth = 0;\n    let unassignedColumnsCount = 0;\n\n    for (const column of columns) {\n      let width = getSpecifiedWidth(column, columnWidths, viewportWidth);\n\n      if (width === undefined) {\n        unassignedColumnsCount++;\n      } else {\n        width = clampColumnWidth(width, column, minColumnWidth);\n        allocatedWidth += width;\n        columnMetrics.set(column, { width, left: 0 });\n      }\n    }\n\n    const unallocatedWidth = viewportWidth - allocatedWidth;\n    const unallocatedColumnWidth = unallocatedWidth / unassignedColumnsCount;\n\n    for (const column of columns) {\n      let width: number;\n      if (columnMetrics.has(column)) {\n        const columnMetric = columnMetrics.get(column)!;\n        columnMetric.left = left;\n        ({ width } = columnMetric);\n      } else {\n        width = clampColumnWidth(unallocatedColumnWidth, column, minColumnWidth);\n        columnMetrics.set(column, { width, left });\n      }\n      totalColumnWidth += width;\n      left += width;\n      templateColumns += `${width}px `;\n    }\n\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex])!;\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n\n    const layoutCssVars: Record<string, string> = {\n      '--template-columns': templateColumns\n    };\n\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--frozen-left-${column.idx}`] = `${columnMetrics.get(column)!.left}px`;\n    }\n\n    return { layoutCssVars, totalColumnWidth, totalFrozenColumnWidth, columnMetrics };\n  }, [columnWidths, columns, viewportWidth, minColumnWidth, lastFrozenColumnIndex]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleStartIdx])!;\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleEndIdx])!;\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [\n    columnMetrics,\n    columns,\n    lastFrozenColumnIndex,\n    scrollLeft,\n    totalFrozenColumnWidth,\n    viewportWidth,\n    enableVirtualization\n  ]);\n\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    layoutCssVars,\n    columnMetrics,\n    totalColumnWidth,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  };\n}\n\nfunction getSpecifiedWidth<R, SR>(\n  { key, width }: Column<R, SR>,\n  columnWidths: ReadonlyMap<string, number>,\n  viewportWidth: number\n): number | undefined {\n  if (columnWidths.has(key)) {\n    // Use the resized width if available\n    return columnWidths.get(key);\n  }\n  if (typeof width === 'number') {\n    return width;\n  }\n  if (typeof width === 'string' && /^\\d+%$/.test(width)) {\n    return floor((viewportWidth * parseInt(width, 10)) / 100);\n  }\n  return undefined;\n}\n\nfunction clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: Column<R, SR>,\n  minColumnWidth: number\n): number {\n  width = max(width, minWidth ?? minColumnWidth);\n\n  if (typeof maxWidth === 'number') {\n    return min(width, maxWidth);\n  }\n\n  return width;\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn, SortColumn } from './types';\nimport type { HeaderRowProps } from './HeaderRow';\nimport SortableHeaderCell from './headerCells/SortableHeaderCell';\nimport { getCellStyle, getCellClassname } from './utils';\nimport { useRovingCellRef } from './hooks';\n\nconst cellResizable = css`\n  touch-action: none;\n\n  &::after {\n    content: '';\n    cursor: col-resize;\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    width: 10px;\n  }\n`;\n\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\n\ntype SharedHeaderRowProps<R, SR> = Pick<\n  HeaderRowProps<R, SR, React.Key>,\n  | 'sortColumns'\n  | 'onSortColumnsChange'\n  | 'allRowsSelected'\n  | 'onAllRowsSelectionChange'\n  | 'selectCell'\n  | 'onColumnResize'\n  | 'shouldFocusGrid'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  colSpan: number | undefined;\n  isCellSelected: boolean;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  onColumnResize,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  sortColumns,\n  onSortColumnsChange,\n  selectCell,\n  shouldFocusGrid\n}: HeaderCellProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n  const sortIndex = sortColumns?.findIndex((sort) => sort.columnKey === column.key);\n  const sortColumn =\n    sortIndex !== undefined && sortIndex > -1 ? sortColumns![sortIndex] : undefined;\n  const sortDirection = sortColumn?.direction;\n  const priority = sortColumn !== undefined && sortColumns!.length > 1 ? sortIndex! + 1 : undefined;\n  const ariaSort =\n    sortDirection && !priority ? (sortDirection === 'ASC' ? 'ascending' : 'descending') : undefined;\n\n  const className = getCellClassname(column, column.headerCellClass, {\n    [cellResizableClassname]: column.resizable\n  });\n\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    const { currentTarget, pointerId } = event;\n    const { right } = currentTarget.getBoundingClientRect();\n    const offset = right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    function onPointerMove(event: PointerEvent) {\n      const width = event.clientX + offset - currentTarget.getBoundingClientRect().left;\n      if (width > 0) {\n        onColumnResize(column, width);\n      }\n    }\n\n    function onLostPointerCapture() {\n      currentTarget.removeEventListener('pointermove', onPointerMove);\n      currentTarget.removeEventListener('lostpointercapture', onLostPointerCapture);\n    }\n\n    currentTarget.setPointerCapture(pointerId);\n    currentTarget.addEventListener('pointermove', onPointerMove);\n    currentTarget.addEventListener('lostpointercapture', onLostPointerCapture);\n  }\n\n  function onSort(ctrlClick: boolean) {\n    if (onSortColumnsChange == null) return;\n    const { sortDescendingFirst } = column;\n    if (sortColumn === undefined) {\n      // not currently sorted\n      const nextSort: SortColumn = {\n        columnKey: column.key,\n        direction: sortDescendingFirst ? 'DESC' : 'ASC'\n      };\n      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);\n    } else {\n      let nextSortColumn: SortColumn | undefined;\n      if (\n        (sortDescendingFirst && sortDirection === 'DESC') ||\n        (!sortDescendingFirst && sortDirection === 'ASC')\n      ) {\n        nextSortColumn = {\n          columnKey: column.key,\n          direction: sortDirection === 'ASC' ? 'DESC' : 'ASC'\n        };\n      }\n      if (ctrlClick) {\n        const nextSortColumns = [...sortColumns!];\n        if (nextSortColumn) {\n          // swap direction\n          nextSortColumns[sortIndex!] = nextSortColumn;\n        } else {\n          // remove sort\n          nextSortColumns.splice(sortIndex!, 1);\n        }\n        onSortColumnsChange(nextSortColumns);\n      } else {\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\n      }\n    }\n  }\n\n  function onClick() {\n    selectCell(column.idx);\n  }\n\n  function handleFocus(event: React.FocusEvent<HTMLDivElement>) {\n    onFocus(event);\n    if (shouldFocusGrid) {\n      // Select the first header cell if there is no selected cell\n      selectCell(0);\n    }\n  }\n\n  function getCell() {\n    if (column.headerRenderer) {\n      return (\n        <column.headerRenderer\n          column={column}\n          sortDirection={sortDirection}\n          priority={priority}\n          onSort={onSort}\n          allRowsSelected={allRowsSelected}\n          onAllRowsSelectionChange={onAllRowsSelectionChange}\n          isCellSelected={isCellSelected}\n        />\n      );\n    }\n\n    if (column.sortable) {\n      return (\n        <SortableHeaderCell\n          onSort={onSort}\n          sortDirection={sortDirection}\n          priority={priority}\n          isCellSelected={isCellSelected}\n        >\n          {column.name}\n        </SortableHeaderCell>\n      );\n    }\n\n    return column.name;\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      aria-sort={ariaSort}\n      aria-colspan={colSpan}\n      ref={ref}\n      // set the tabIndex to 0 when there is no selected cell so grid can receive focus\n      tabIndex={shouldFocusGrid ? 0 : tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onFocus={handleFocus}\n      onClick={onClick}\n      onPointerDown={column.resizable ? onPointerDown : undefined}\n    >\n      {getCell()}\n    </div>\n  );\n}\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport HeaderCell from './HeaderCell';\nimport type { CalculatedColumn } from './types';\nimport { getColSpan } from './utils';\nimport type { DataGridProps } from './DataGrid';\nimport { useRovingRowRef } from './hooks';\n\ntype SharedDataGridProps<R, SR, K extends React.Key> = Pick<\n  DataGridProps<R, SR, K>,\n  'sortColumns' | 'onSortColumnsChange'\n>;\n\nexport interface HeaderRowProps<R, SR, K extends React.Key> extends SharedDataGridProps<R, SR, K> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  allRowsSelected: boolean;\n  onAllRowsSelectionChange: (checked: boolean) => void;\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number) => void;\n  selectCell: (columnIdx: number) => void;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  shouldFocusGrid: boolean;\n}\n\nconst headerRow = css`\n  contain: strict;\n  contain: size layout style paint;\n  display: grid;\n  grid-template-columns: var(--template-columns);\n  grid-template-rows: var(--header-row-height);\n  height: var(--header-row-height); /* needed on Firefox */\n  line-height: var(--header-row-height);\n  width: var(--row-width);\n  position: sticky;\n  top: 0;\n  background-color: var(--header-background-color);\n  font-weight: bold;\n  z-index: 3;\n  outline: none;\n\n  &[aria-selected='true'] {\n    box-shadow: inset 0 0 0 2px var(--selection-color);\n  }\n`;\n\nconst headerRowClassname = `rdg-header-row ${headerRow}`;\n\nfunction HeaderRow<R, SR, K extends React.Key>({\n  columns,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  onColumnResize,\n  sortColumns,\n  onSortColumnsChange,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  shouldFocusGrid\n}: HeaderRowProps<R, SR, K>) {\n  const { ref, tabIndex, className } = useRovingRowRef(selectedCellIdx);\n\n  const cells = [];\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    cells.push(\n      <HeaderCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        isCellSelected={selectedCellIdx === column.idx}\n        onColumnResize={onColumnResize}\n        allRowsSelected={allRowsSelected}\n        onAllRowsSelectionChange={onAllRowsSelectionChange}\n        onSortColumnsChange={onSortColumnsChange}\n        sortColumns={sortColumns}\n        selectCell={selectCell}\n        shouldFocusGrid={shouldFocusGrid && index === 0}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={1} // aria-rowindex is 1 based\n      ref={ref}\n      tabIndex={tabIndex}\n      className={clsx(headerRowClassname, className)}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR, K extends React.Key>(\n  props: HeaderRowProps<R, SR, K>\n) => JSX.Element;\n","import { memo } from 'react';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CalculatedColumn, GroupRow } from './types';\nimport type { GroupRowRendererProps } from './GroupRow';\nimport { useRovingCellRef } from './hooks';\n\ntype SharedGroupRowRendererProps<R, SR> = Pick<\n  GroupRowRendererProps<R, SR>,\n  'id' | 'groupKey' | 'childRows' | 'isExpanded' | 'toggleGroup'\n>;\n\ninterface GroupCellProps<R, SR> extends SharedGroupRowRendererProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  row: GroupRow<R>;\n  isCellSelected: boolean;\n  groupColumnIndex: number;\n}\n\nfunction GroupCell<R, SR>({\n  id,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  column,\n  row,\n  groupColumnIndex,\n  toggleGroup: toggleGroupWrapper\n}: GroupCellProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n\n  // Only make the cell clickable if the group level matches\n  const isLevelMatching = column.rowGroup && groupColumnIndex === column.idx;\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      ref={ref}\n      tabIndex={tabIndex}\n      key={column.key}\n      className={getCellClassname(column)}\n      style={{\n        ...getCellStyle(column),\n        cursor: isLevelMatching ? 'pointer' : 'default'\n      }}\n      onClick={isLevelMatching ? toggleGroup : undefined}\n      onFocus={onFocus}\n    >\n      {(!column.rowGroup || groupColumnIndex === column.idx) && column.groupFormatter && (\n        <column.groupFormatter\n          groupKey={groupKey}\n          childRows={childRows}\n          column={column}\n          row={row}\n          isExpanded={isExpanded}\n          isCellSelected={isCellSelected}\n          toggleGroup={toggleGroup}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(GroupCell) as <R, SR>(props: GroupCellProps<R, SR>) => JSX.Element;\n","import type { CSSProperties } from 'react';\nimport { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport { cell, cellFrozenLast, rowClassname } from './style';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport GroupCell from './GroupCell';\nimport type { CalculatedColumn, GroupRow, Omit } from './types';\nimport { RowSelectionProvider, useRovingRowRef } from './hooks';\n\nexport interface GroupRowRendererProps<R, SR>\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'children'> {\n  id: string;\n  groupKey: unknown;\n  viewportColumns: readonly CalculatedColumn<R, SR>[];\n  childRows: readonly R[];\n  rowIdx: number;\n  row: GroupRow<R>;\n  top: number;\n  height: number;\n  level: number;\n  selectedCellIdx: number | undefined;\n  isExpanded: boolean;\n  isRowSelected: boolean;\n  selectGroup: (rowIdx: number) => void;\n  toggleGroup: (expandedGroupId: unknown) => void;\n}\n\nconst groupRow = css`\n  &:not([aria-selected='true']) {\n    background-color: var(--header-background-color);\n  }\n\n  > .${cell}:not(:last-child):not(.${cellFrozenLast}) {\n    border-right: none;\n  }\n`;\n\nconst groupRowClassname = `rdg-group-row ${groupRow}`;\n\nfunction GroupedRow<R, SR>({\n  id,\n  groupKey,\n  viewportColumns,\n  childRows,\n  rowIdx,\n  row,\n  top,\n  height,\n  level,\n  isExpanded,\n  selectedCellIdx,\n  isRowSelected,\n  selectGroup,\n  toggleGroup,\n  ...props\n}: GroupRowRendererProps<R, SR>) {\n  const { ref, tabIndex, className } = useRovingRowRef(selectedCellIdx);\n\n  // Select is always the first column\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? level + 1 : level;\n\n  function handleSelectGroup() {\n    selectGroup(rowIdx);\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        aria-level={level}\n        aria-expanded={isExpanded}\n        ref={ref}\n        tabIndex={tabIndex}\n        className={clsx(\n          rowClassname,\n          groupRowClassname,\n          `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n          className\n        )}\n        onClick={handleSelectGroup}\n        style={\n          {\n            top,\n            '--row-height': `${height}px`\n          } as unknown as CSSProperties\n        }\n        {...props}\n      >\n        {viewportColumns.map((column) => (\n          <GroupCell\n            key={column.key}\n            id={id}\n            groupKey={groupKey}\n            childRows={childRows}\n            isExpanded={isExpanded}\n            isCellSelected={selectedCellIdx === column.idx}\n            column={column}\n            row={row}\n            groupColumnIndex={idx}\n            toggleGroup={toggleGroup}\n          />\n        ))}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nexport default memo(GroupedRow) as <R, SR>(props: GroupRowRendererProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CalculatedColumn, CellRendererProps } from './types';\nimport { useRovingCellRef } from './hooks';\n\ninterface SharedCellRendererProps<R, SR>\n  extends Pick<CellRendererProps<R, SR>, 'column' | 'colSpan' | 'isCellSelected'> {\n  selectCell: (row: SR, column: CalculatedColumn<R, SR>) => void;\n}\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n}\n\nfunction SummaryCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  isCellSelected,\n  selectCell\n}: SummaryCellProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n  const { summaryFormatter: SummaryFormatter, summaryCellClass } = column;\n  const className = getCellClassname(\n    column,\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  function onClick() {\n    selectCell(row, column);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      ref={ref}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={onClick}\n      onFocus={onFocus}\n    >\n      {SummaryFormatter && (\n        <SummaryFormatter column={column} row={row} isCellSelected={isCellSelected} />\n      )}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport { cell, row, rowClassname } from './style';\nimport { getColSpan } from './utils';\nimport SummaryCell from './SummaryCell';\nimport type { CalculatedColumn, RowRendererProps } from './types';\nimport { useRovingRowRef } from './hooks';\n\ntype SharedRowRendererProps<R, SR> = Pick<RowRendererProps<R, SR>, 'viewportColumns' | 'rowIdx'>;\n\ninterface SummaryRowProps<R, SR> extends SharedRowRendererProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  bottom: number;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  selectCell: (row: SR, column: CalculatedColumn<R, SR>) => void;\n}\n\nconst summaryRow = css`\n  &.${row} {\n    position: sticky;\n    z-index: 3;\n    grid-template-rows: var(--summary-row-height);\n    height: var(--summary-row-height); /* needed on Firefox */\n    line-height: var(--summary-row-height);\n  }\n`;\n\nconst summaryRowBorderClassname = css`\n  & > .${cell} {\n    border-top: 2px solid var(--summary-border-color);\n  }\n`;\n\nconst summaryRowClassname = `rdg-summary-row ${summaryRow}`;\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  row,\n  viewportColumns,\n  bottom,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  'aria-rowindex': ariaRowIndex\n}: SummaryRowProps<R, SR>) {\n  const { ref, tabIndex, className } = useRovingRowRef(selectedCellIdx);\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === column.idx;\n\n    cells.push(\n      <SummaryCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        isCellSelected={isCellSelected}\n        selectCell={selectCell}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      ref={ref}\n      tabIndex={tabIndex}\n      className={clsx(\n        rowClassname,\n        `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n        summaryRowClassname,\n        { [summaryRowBorderClassname]: rowIdx === 0 },\n        className\n      )}\n      style={{ bottom }}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => JSX.Element;\n","import { useEffect, useRef } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useLatestFunc } from './hooks';\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CellRendererProps, EditorProps } from './types';\n\n/*\n * To check for outside `mousedown` events, we listen to all `mousedown` events at their birth,\n * i.e. on the window during the capture phase, and at their death, i.e. on the window during the bubble phase.\n *\n * We schedule a check at the birth of the event, cancel the check when the event reaches the \"inside\" container,\n * and trigger the \"outside\" callback when the event bubbles back up to the window.\n *\n * The event can be `stopPropagation()`ed halfway through, so they may not always bubble back up to the window,\n * so an alternative check must be used. The check must happen after the event can reach the \"inside\" container,\n * and not before it run to completion. `requestAnimationFrame` is the best way we know how to achieve this.\n * Usually we want click event handlers from parent components to access the latest commited values,\n * so `mousedown` is used instead of `click`.\n *\n * We must also rely on React's event capturing/bubbling to handle elements rendered in a portal.\n */\n\nconst cellEditing = css`\n  &.rdg-cell {\n    padding: 0;\n  }\n`;\n\nconst cellEditingClassname = `rdg-editor-container ${cellEditing}`;\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'colSpan'>;\n\ninterface EditCellProps<R, SR> extends EditorProps<R, SR>, SharedCellRendererProps<R, SR> {}\n\nexport default function EditCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  onRowChange,\n  onClose\n}: EditCellProps<R, SR>) {\n  const frameRequestRef = useRef<number | undefined>();\n\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\n  // as `onWindowCaptureMouseDown` might otherwise miss valid mousedown events.\n  // To that end we instead access the latest props via useLatestFunc.\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\n    onRowChange(row, true);\n  });\n\n  function cancelFrameRequest() {\n    cancelAnimationFrame(frameRequestRef.current!);\n  }\n\n  useEffect(() => {\n    function onWindowCaptureMouseDown() {\n      frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n    }\n\n    addEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n\n    return () => {\n      removeEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n      cancelFrameRequest();\n    };\n  }, [commitOnOutsideMouseDown]);\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    cellEditingClassname,\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onMouseDownCapture={cancelFrameRequest}\n    >\n      {column.editor != null && (\n        <column.editor column={column} row={row} onRowChange={onRowChange} onClose={onClose} />\n      )}\n    </div>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn, FillEvent, Position } from './types';\nimport type { DataGridProps, SelectCellState } from './DataGrid';\n\nconst cellDragHandle = css`\n  cursor: move;\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  width: 8px;\n  height: 8px;\n  background-color: var(--selection-color);\n\n  &:hover {\n    width: 16px;\n    height: 16px;\n    border: 2px solid var(--selection-color);\n    background-color: var(--background-color);\n  }\n`;\n\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\n\ninterface Props<R, SR> extends Pick<DataGridProps<R, SR>, 'rows' | 'onRowsChange'> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  selectedPosition: SelectCellState;\n  latestDraggedOverRowIdx: React.MutableRefObject<number | undefined>;\n  isCellEditable: (position: Position) => boolean;\n  onFill: (event: FillEvent<R>) => R;\n  setDragging: (isDragging: boolean) => void;\n  setDraggedOverRowIdx: (overRowIdx: number | undefined) => void;\n}\n\nexport default function DragHandle<R, SR>({\n  rows,\n  columns,\n  selectedPosition,\n  latestDraggedOverRowIdx,\n  isCellEditable,\n  onRowsChange,\n  onFill,\n  setDragging,\n  setDraggedOverRowIdx\n}: Props<R, SR>) {\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined) return;\n\n    const { rowIdx } = selectedPosition;\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    updateRows(startRowIndex, endRowIndex);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    updateRows(selectedPosition.rowIdx + 1, rows.length);\n  }\n\n  function updateRows(startRowIdx: number, endRowIdx: number) {\n    const { idx, rowIdx } = selectedPosition;\n    const column = columns[idx];\n    const sourceRow = rows[rowIdx];\n    const updatedRows = [...rows];\n    const indexes: number[] = [];\n    for (let i = startRowIdx; i < endRowIdx; i++) {\n      if (isCellEditable({ rowIdx: i, idx })) {\n        const updatedRow = onFill({ columnKey: column.key, sourceRow, targetRow: rows[i] });\n        if (updatedRow !== rows[i]) {\n          updatedRows[i] = updatedRow;\n          indexes.push(i);\n        }\n      }\n    }\n\n    if (indexes.length > 0) {\n      onRowsChange?.(updatedRows, { indexes, column });\n    }\n  }\n\n  return (\n    <div\n      className={cellDragHandleClassname}\n      onMouseDown={handleMouseDown}\n      onDoubleClick={handleDoubleClick}\n    />\n  );\n}\n","// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\nexport function isDefaultCellInput(event: React.KeyboardEvent<HTMLDivElement>): boolean {\n  return !nonInputKeys.has(event.key);\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (\n    key === 'Tab' &&\n    (target instanceof HTMLInputElement ||\n      target instanceof HTMLTextAreaElement ||\n      target instanceof HTMLSelectElement)\n  ) {\n    return target.matches(\n      '.rdg-editor-container > :only-child, .rdg-editor-container > label:only-child > :only-child'\n    );\n  }\n  return false;\n}\n","import { forwardRef, useState, useRef, useImperativeHandle, useCallback, useMemo } from 'react';\nimport type { Key, RefAttributes } from 'react';\nimport clsx from 'clsx';\n\nimport { rootClassname, viewportDraggingClassname } from './style';\nimport {\n  useLayoutEffect,\n  useGridDimensions,\n  useCalculatedColumns,\n  useViewportColumns,\n  useViewportRows,\n  useLatestFunc,\n  RowSelectionChangeProvider\n} from './hooks';\nimport HeaderRow from './HeaderRow';\nimport Row from './Row';\nimport GroupRowRenderer from './GroupRow';\nimport SummaryRow from './SummaryRow';\nimport EditCell from './EditCell';\nimport DragHandle from './DragHandle';\nimport {\n  assertIsValidKeyGetter,\n  onEditorNavigation,\n  getNextSelectedCellPosition,\n  isSelectedCellEditable,\n  canExitGrid,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput,\n  getColSpan,\n  max,\n  sign,\n  getSelectedCellColSpan\n} from './utils';\n\nimport type {\n  CalculatedColumn,\n  Column,\n  Position,\n  RowRendererProps,\n  RowsChangeData,\n  SelectRowEvent,\n  FillEvent,\n  PasteEvent,\n  CellNavigationMode,\n  SortColumn,\n  RowHeightArgs,\n  Maybe\n} from './types';\n\nexport interface SelectCellState extends Position {\n  readonly mode: 'SELECT';\n}\n\ninterface EditCellState<R> extends Position {\n  readonly mode: 'EDIT';\n  readonly row: R;\n  readonly originalRow: R;\n  readonly key: string | null;\n}\n\ntype DefaultColumnOptions<R, SR> = Pick<\n  Column<R, SR>,\n  'formatter' | 'minWidth' | 'resizable' | 'sortable'\n>;\n\nconst initialPosition: SelectCellState = {\n  idx: -1,\n  rowIdx: -2,\n  mode: 'SELECT'\n};\n\nexport interface DataGridHandle {\n  element: HTMLDivElement | null;\n  scrollToColumn: (colIdx: number) => void;\n  scrollToRow: (rowIdx: number) => void;\n  selectCell: (position: Position, enableEditor?: Maybe<boolean>) => void;\n}\n\ntype SharedDivProps = Pick<\n  React.HTMLAttributes<HTMLDivElement>,\n  'aria-label' | 'aria-labelledby' | 'aria-describedby' | 'className' | 'style'\n>;\n\nexport interface DataGridProps<R, SR = unknown, K extends Key = Key> extends SharedDivProps {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly Column<R, SR>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   * Bottom horizontal scroll bar can move the row left / right. Or a customized row renderer can be used to disabled the scrolling support.\n   */\n  summaryRows?: Maybe<readonly SR[]>;\n  /** The getter should return a unique key for each row */\n  rowKeyGetter?: Maybe<(row: R) => K>;\n  onRowsChange?: Maybe<(rows: R[], data: RowsChangeData<R, SR>) => void>;\n\n  /**\n   * Dimensions props\n   */\n  /**\n   * The height of each row in pixels\n   * @default 35\n   */\n  rowHeight?: Maybe<number | ((args: RowHeightArgs<R>) => number)>;\n  /**\n   * The height of the header row in pixels\n   * @default 35\n   */\n  headerRowHeight?: Maybe<number>;\n  /**\n   * The height of each summary row in pixels\n   * @default 35\n   */\n  summaryRowHeight?: Maybe<number>;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: Maybe<ReadonlySet<K>>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: Maybe<(selectedRows: Set<K>) => void>;\n  /** Used for multi column sorting */\n  sortColumns?: Maybe<readonly SortColumn[]>;\n  onSortColumnsChange?: Maybe<(sortColumns: SortColumn[]) => void>;\n  defaultColumnOptions?: Maybe<DefaultColumnOptions<R, SR>>;\n  groupBy?: Maybe<readonly string[]>;\n  rowGrouper?: Maybe<(rows: readonly R[], columnKey: string) => Record<string, readonly R[]>>;\n  expandedGroupIds?: Maybe<ReadonlySet<unknown>>;\n  onExpandedGroupIdsChange?: Maybe<(expandedGroupIds: Set<unknown>) => void>;\n  onFill?: Maybe<(event: FillEvent<R>) => R>;\n  onPaste?: Maybe<(event: PasteEvent<R>) => R>;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a row is clicked */\n  onRowClick?: Maybe<(row: R, column: CalculatedColumn<R, SR>) => void>;\n  /** Function called whenever a row is double clicked */\n  onRowDoubleClick?: Maybe<(row: R, column: CalculatedColumn<R, SR>) => void>;\n  /** Called when the grid is scrolled */\n  onScroll?: Maybe<(event: React.UIEvent<HTMLDivElement>) => void>;\n  /** Called when a column is resized */\n  onColumnResize?: Maybe<(idx: number, width: number) => void>;\n  /** Function called whenever selected cell is changed */\n  onSelectedCellChange?: Maybe<(position: Position) => void>;\n\n  /**\n   * Toggles and modes\n   */\n  /** @default 'NONE' */\n  cellNavigationMode?: Maybe<CellNavigationMode>;\n  /** @default true */\n  enableVirtualization?: Maybe<boolean>;\n\n  /**\n   * Miscellaneous\n   */\n  rowRenderer?: Maybe<React.ComponentType<RowRendererProps<R, SR>>>;\n  noRowsFallback?: React.ReactNode;\n  rowClass?: Maybe<(row: R) => Maybe<string>>;\n  'data-testid'?: Maybe<string>;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n */\nfunction DataGrid<R, SR, K extends Key>(\n  {\n    // Grid and data Props\n    columns: rawColumns,\n    rows: rawRows,\n    summaryRows,\n    rowKeyGetter,\n    onRowsChange,\n    // Dimensions props\n    rowHeight,\n    headerRowHeight: rawHeaderRowHeight,\n    summaryRowHeight: rawSummaryRowHeight,\n    // Feature props\n    selectedRows,\n    onSelectedRowsChange,\n    sortColumns,\n    onSortColumnsChange,\n    defaultColumnOptions,\n    groupBy: rawGroupBy,\n    rowGrouper,\n    expandedGroupIds,\n    onExpandedGroupIdsChange,\n    // Event props\n    onRowClick,\n    onRowDoubleClick,\n    onScroll,\n    onColumnResize,\n    onSelectedCellChange,\n    onFill,\n    onPaste,\n    // Toggles and modes\n    cellNavigationMode: rawCellNavigationMode,\n    enableVirtualization,\n    // Miscellaneous\n    rowRenderer,\n    noRowsFallback,\n    className,\n    style,\n    rowClass,\n    // ARIA\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    'data-testid': testId\n  }: DataGridProps<R, SR, K>,\n  ref: React.Ref<DataGridHandle>\n) {\n  /**\n   * defaults\n   */\n  rowHeight ??= 35;\n  const headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const summaryRowHeight = rawSummaryRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const RowRenderer = rowRenderer ?? Row;\n  const cellNavigationMode = rawCellNavigationMode ?? 'NONE';\n  enableVirtualization ??= true;\n\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [columnWidths, setColumnWidths] = useState<ReadonlyMap<string, number>>(() => new Map());\n  const [selectedPosition, setSelectedPosition] = useState<SelectCellState | EditCellState<R>>(\n    initialPosition\n  );\n  const [copiedCell, setCopiedCell] = useState<{ row: R; columnKey: string } | null>(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(undefined);\n\n  /**\n   * refs\n   */\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n\n  /**\n   * computed values\n   */\n  const [gridRef, gridWidth, gridHeight] = useGridDimensions();\n  const headerRowsCount = 1;\n  const summaryRowsCount = summaryRows?.length ?? 0;\n  const clientHeight = gridHeight - headerRowHeight - summaryRowsCount * summaryRowHeight;\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n  const isHeaderRowSelected = selectedPosition.rowIdx === -1;\n\n  const allRowsSelected = useMemo((): boolean => {\n    // no rows to select = explicitely unchecked\n    const { length } = rawRows;\n    return (\n      length !== 0 &&\n      selectedRows != null &&\n      rowKeyGetter != null &&\n      selectedRows.size >= length &&\n      rawRows.every((row) => selectedRows.has(rowKeyGetter(row)))\n    );\n  }, [rawRows, selectedRows, rowKeyGetter]);\n\n  const {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    layoutCssVars,\n    columnMetrics,\n    totalColumnWidth,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  } = useCalculatedColumns({\n    rawColumns,\n    columnWidths,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    defaultColumnOptions,\n    rawGroupBy: rowGrouper ? rawGroupBy : undefined,\n    enableVirtualization\n  });\n\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useViewportRows({\n    rawRows,\n    groupBy,\n    rowGrouper,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    expandedGroupIds,\n    enableVirtualization\n  });\n\n  const viewportColumns = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    summaryRows,\n    isGroupRow\n  });\n\n  const hasGroups = groupBy.length > 0 && typeof rowGrouper === 'function';\n  const minColIdx = hasGroups ? -1 : 0;\n  const maxColIdx = columns.length - 1;\n  const minRowIdx = -1; // change it to 0?\n  const maxRowIdx = headerRowsCount + rows.length + summaryRowsCount - 2;\n  const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);\n  const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const selectRowLatest = useLatestFunc(selectRow);\n  const selectAllRowsLatest = useLatestFunc(selectAllRows);\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n  const selectViewportCellLatest = useLatestFunc(\n    (row: R, column: CalculatedColumn<R, SR>, enableEditor: Maybe<boolean>) => {\n      const rowIdx = rows.indexOf(row);\n      selectCell({ rowIdx, idx: column.idx }, enableEditor);\n    }\n  );\n  const selectGroupLatest = useLatestFunc((rowIdx: number) => {\n    selectCell({ rowIdx, idx: -1 });\n  });\n  const selectHeaderCellLatest = useLatestFunc((idx: number) => {\n    selectCell({ rowIdx: -1, idx });\n  });\n  const selectSummaryCellLatest = useLatestFunc(\n    (summaryRow: SR, column: CalculatedColumn<R, SR>) => {\n      const rowIdx = summaryRows!.indexOf(summaryRow) + headerRowsCount + rows.length - 1;\n      selectCell({ rowIdx, idx: column.idx });\n    }\n  );\n  const toggleGroupLatest = useLatestFunc(toggleGroup);\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (\n      !selectedCellIsWithinSelectionBounds ||\n      selectedPosition === prevSelectedPosition.current ||\n      selectedPosition.mode === 'EDIT'\n    ) {\n      return;\n    }\n    prevSelectedPosition.current = selectedPosition;\n    scrollToCell(selectedPosition);\n  });\n\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToColumn(idx: number) {\n      scrollToCell({ idx });\n    },\n    scrollToRow(rowIdx: number) {\n      const { current } = gridRef;\n      if (!current) return;\n      current.scrollTo({\n        top: getRowTop(rowIdx),\n        behavior: 'smooth'\n      });\n    },\n    selectCell\n  }));\n\n  /**\n   * callbacks\n   */\n  const handleColumnResize = useCallback(\n    (column: CalculatedColumn<R, SR>, width: number) => {\n      setColumnWidths((columnWidths) => {\n        const newColumnWidths = new Map(columnWidths);\n        newColumnWidths.set(column.key, width);\n        return newColumnWidths;\n      });\n\n      onColumnResize?.(column.idx, width);\n    },\n    [onColumnResize]\n  );\n\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  /**\n   * event handlers\n   */\n  function selectRow({ row, checked, isShiftClick }: SelectRowEvent<R>) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n    if (isGroupRow(row)) {\n      for (const childRow of row.childRows) {\n        const rowKey = rowKeyGetter(childRow);\n        if (checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n\n    const rowKey = rowKeyGetter(row);\n    if (checked) {\n      newSelectedRows.add(rowKey);\n      const previousRowIdx = lastSelectedRowIdx.current;\n      const rowIdx = rows.indexOf(row);\n      lastSelectedRowIdx.current = rowIdx;\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n        const step = sign(rowIdx - previousRowIdx);\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n          const row = rows[i];\n          if (isGroupRow(row)) continue;\n          newSelectedRows.add(rowKeyGetter(row));\n        }\n      }\n    } else {\n      newSelectedRows.delete(rowKey);\n      lastSelectedRowIdx.current = -1;\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function selectAllRows(checked: boolean) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n\n    for (const row of rawRows) {\n      const rowKey = rowKeyGetter(row);\n      if (checked) {\n        newSelectedRows.add(rowKey);\n      } else {\n        newSelectedRows.delete(rowKey);\n      }\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function toggleGroup(expandedGroupId: unknown) {\n    if (!onExpandedGroupIdsChange) return;\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n    if (newExpandedGroupIds.has(expandedGroupId)) {\n      newExpandedGroupIds.delete(expandedGroupId);\n    } else {\n      newExpandedGroupIds.add(expandedGroupId);\n    }\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (!(event.target instanceof Element)) return;\n    const isCellEvent = event.target.closest('.rdg-cell') !== null;\n    const isRowEvent = hasGroups && event.target.matches('.rdg-row, .rdg-header-row');\n    if (!isCellEvent && !isRowEvent) return;\n\n    const { key, keyCode } = event;\n    const { rowIdx } = selectedPosition;\n\n    if (\n      selectedCellIsWithinViewportBounds &&\n      onPaste != null &&\n      isCtrlKeyHeldDown(event) &&\n      !isGroupRow(rows[rowIdx]) &&\n      selectedPosition.mode === 'SELECT'\n    ) {\n      // event.key may differ by keyboard input language, so we use event.keyCode instead\n      // event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\n      const cKey = 67;\n      const vKey = 86;\n      if (keyCode === cKey) {\n        handleCopy();\n        return;\n      }\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n\n    if (isRowIdxWithinViewportBounds(rowIdx)) {\n      const row = rows[rowIdx];\n\n      if (\n        isGroupRow(row) &&\n        selectedPosition.idx === -1 &&\n        // Collapse the current group row if it is focused and is in expanded state\n        ((key === 'ArrowLeft' && row.isExpanded) ||\n          // Expand the current group row if it is focused and is in collapsed state\n          (key === 'ArrowRight' && !row.isExpanded))\n      ) {\n        event.preventDefault(); // Prevents scrolling\n        toggleGroup(row.id);\n        return;\n      }\n    }\n\n    switch (event.key) {\n      case 'Escape':\n        setCopiedCell(null);\n        closeEditor();\n        return;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    setScrollTop(scrollTop);\n    setScrollLeft(scrollLeft);\n    onScroll?.(event);\n  }\n\n  function getRawRowIdx(rowIdx: number) {\n    return hasGroups ? rawRows.indexOf(rows[rowIdx] as R) : rowIdx;\n  }\n\n  function updateRow(rowIdx: number, row: R) {\n    if (typeof onRowsChange !== 'function') return;\n    const rawRowIdx = getRawRowIdx(rowIdx);\n    if (row === rawRows[rawRowIdx]) return;\n    const updatedRows = [...rawRows];\n    updatedRows[rawRowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rawRowIdx],\n      column: columns[selectedPosition.idx]\n    });\n  }\n\n  function commitEditorChanges() {\n    if (\n      columns[selectedPosition.idx]?.editor == null ||\n      selectedPosition.mode === 'SELECT' ||\n      selectedPosition.row === selectedPosition.originalRow\n    ) {\n      return;\n    }\n\n    updateRow(selectedPosition.rowIdx, selectedPosition.row);\n  }\n\n  function handleCopy() {\n    const { idx, rowIdx } = selectedPosition;\n    setCopiedCell({ row: rawRows[getRawRowIdx(rowIdx)], columnKey: columns[idx].key });\n  }\n\n  function handlePaste() {\n    if (!onPaste || !onRowsChange || copiedCell === null || !isCellEditable(selectedPosition)) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const targetRow = rawRows[getRawRowIdx(rowIdx)];\n\n    const updatedTargetRow = onPaste({\n      sourceRow: copiedCell.row,\n      sourceColumnKey: copiedCell.columnKey,\n      targetRow,\n      targetColumnKey: columns[idx].key\n    });\n\n    updateRow(rowIdx, updatedTargetRow);\n  }\n\n  function handleCellInput(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (!selectedCellIsWithinViewportBounds) return;\n    const row = rows[selectedPosition.rowIdx];\n    if (isGroupRow(row)) return;\n    const { key, shiftKey } = event;\n\n    if (selectedPosition.mode === 'EDIT') {\n      if (key === 'Enter') {\n        // Custom editors can listen for the event and stop propagation to prevent commit\n        commitEditorChanges();\n        closeEditor();\n      }\n      return;\n    }\n\n    // Select the row on Shift + Space\n    if (isSelectable && shiftKey && key === ' ') {\n      assertIsValidKeyGetter<R, K>(rowKeyGetter);\n      const rowKey = rowKeyGetter(row);\n      selectRow({ row, checked: !selectedRows.has(rowKey), isShiftClick: false });\n      // do not scroll\n      event.preventDefault();\n      return;\n    }\n\n    const column = columns[selectedPosition.idx];\n    column.editorOptions?.onCellKeyDown?.(event);\n    if (event.isDefaultPrevented()) return;\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        key,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n\n  function handleEditorRowChange(row: R, commitChanges?: boolean) {\n    if (selectedPosition.mode === 'SELECT') return;\n    if (commitChanges) {\n      updateRow(selectedPosition.rowIdx, row);\n      closeEditor();\n    } else {\n      setSelectedPosition((position) => ({ ...position, row }));\n    }\n  }\n\n  function handleOnClose(commitChanges?: boolean) {\n    if (commitChanges) {\n      commitEditorChanges();\n    }\n    closeEditor();\n  }\n\n  /**\n   * utils\n   */\n  function isColIdxWithinSelectionBounds(idx: number) {\n    return idx >= minColIdx && idx <= maxColIdx;\n  }\n\n  function isRowIdxWithinViewportBounds(rowIdx: number) {\n    return rowIdx >= 0 && rowIdx < rows.length;\n  }\n\n  function isCellWithinSelectionBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellWithinViewportBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return (\n      isCellWithinViewportBounds(position) &&\n      isSelectedCellEditable({ columns, rows, selectedPosition: position, isGroupRow })\n    );\n  }\n\n  function selectCell(position: Position, enableEditor?: Maybe<boolean>): void {\n    if (!isCellWithinSelectionBounds(position)) return;\n    commitEditorChanges();\n\n    if (enableEditor && isCellEditable(position)) {\n      const row = rows[position.rowIdx] as R;\n      setSelectedPosition({ ...position, mode: 'EDIT', key: null, row, originalRow: row });\n      onSelectedCellChange?.(position);\n    } else if (\n      selectedPosition.mode !== 'SELECT' ||\n      selectedPosition.idx !== position.idx ||\n      selectedPosition.rowIdx !== position.rowIdx\n    ) {\n      // Avoid re-renders if the selected cell state is the same\n      // TODO: replace with a #record? https://github.com/microsoft/TypeScript/issues/39831\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n      onSelectedCellChange?.(position);\n    }\n  }\n\n  function closeEditor() {\n    if (selectedPosition.mode === 'SELECT') return;\n    setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n  }\n\n  function scrollToCell({ idx, rowIdx }: Partial<Position>): void {\n    const { current } = gridRef;\n    if (!current) return;\n\n    if (typeof idx === 'number' && idx > lastFrozenColumnIndex) {\n      rowIdx ??= selectedPosition.rowIdx;\n      if (!isCellWithinSelectionBounds({ rowIdx, idx })) return;\n      const { clientWidth } = current;\n      const column = columns[idx];\n      const { left, width } = columnMetrics.get(column)!;\n      let right = left + width;\n\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        summaryRows,\n        rowIdx,\n        lastFrozenColumnIndex,\n        column,\n        isGroupRow\n      });\n\n      if (colSpan !== undefined) {\n        const { left, width } = columnMetrics.get(columns[column.idx + colSpan - 1])!;\n        right = left + width;\n      }\n\n      const isCellAtLeftBoundary = left < scrollLeft + totalFrozenColumnWidth;\n      const isCellAtRightBoundary = right > clientWidth + scrollLeft;\n      if (isCellAtLeftBoundary) {\n        current.scrollLeft = left - totalFrozenColumnWidth;\n      } else if (isCellAtRightBoundary) {\n        current.scrollLeft = right - clientWidth;\n      }\n    }\n\n    if (typeof rowIdx === 'number' && isRowIdxWithinViewportBounds(rowIdx)) {\n      const rowTop = getRowTop(rowIdx);\n      const rowHeight = getRowHeight(rowIdx);\n      if (rowTop < scrollTop) {\n        // at top boundary, scroll to the row's top\n        current.scrollTop = rowTop;\n      } else if (rowTop + rowHeight > scrollTop + clientHeight) {\n        // at bottom boundary, scroll the next row's top to the bottom of the viewport\n        current.scrollTop = rowTop + rowHeight - clientHeight;\n      }\n    }\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const row = rows[rowIdx];\n    const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;\n\n    // If a group row is focused, and it is collapsed, move to the parent group row (if there is one).\n    if (\n      key === 'ArrowLeft' &&\n      isRowSelected &&\n      isGroupRow(row) &&\n      !row.isExpanded &&\n      row.level !== 0\n    ) {\n      let parentRowIdx = -1;\n      for (let i = selectedPosition.rowIdx - 1; i >= 0; i--) {\n        const parentRow = rows[i];\n        if (isGroupRow(parentRow) && parentRow.id === row.parentId) {\n          parentRowIdx = i;\n          break;\n        }\n      }\n      if (parentRowIdx !== -1) {\n        return { idx, rowIdx: parentRowIdx };\n      }\n    }\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case 'ArrowLeft':\n        return { idx: idx - 1, rowIdx };\n      case 'ArrowRight':\n        return { idx: idx + 1, rowIdx };\n      case 'Tab':\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: 0 };\n        return { idx: 0, rowIdx: ctrlKey ? minRowIdx : rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: rows.length - 1 };\n        return { idx: maxColIdx, rowIdx: ctrlKey ? maxRowIdx : rowIdx };\n      case 'PageUp': {\n        if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n        return { idx, rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0 };\n      }\n      case 'PageDown': {\n        if (selectedPosition.rowIdx >= rows.length) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + clientHeight;\n        return { idx, rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1 };\n      }\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (selectedPosition.mode === 'EDIT') {\n      const onNavigation =\n        columns[selectedPosition.idx].editorOptions?.onNavigation ?? onEditorNavigation;\n      if (!onNavigation(event)) return;\n    }\n    const { key, shiftKey } = event;\n    let mode = cellNavigationMode;\n    if (key === 'Tab') {\n      // If we are in a position to leave the grid, stop editing but stay in that cell\n      if (\n        canExitGrid({\n          shiftKey,\n          cellNavigationMode,\n          maxColIdx,\n          minRowIdx,\n          maxRowIdx,\n          selectedPosition\n        })\n      ) {\n        commitEditorChanges();\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      mode = cellNavigationMode === 'NONE' ? 'CHANGE_ROW' : cellNavigationMode;\n    }\n\n    // Do not allow focus to leave\n    event.preventDefault();\n\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    if (\n      nextPosition.rowIdx === selectedPosition.rowIdx &&\n      nextPosition.idx === selectedPosition.idx\n    ) {\n      return;\n    }\n\n    const nextSelectedCellPosition = getNextSelectedCellPosition({\n      columns,\n      colSpanColumns,\n      rows,\n      summaryRows,\n      minRowIdx,\n      maxRowIdx,\n      lastFrozenColumnIndex,\n      cellNavigationMode: mode,\n      currentPosition: selectedPosition,\n      nextPosition,\n      isCellWithinBounds: isCellWithinSelectionBounds,\n      isGroupRow\n    });\n\n    selectCell(nextSelectedCellPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number): number | undefined {\n    if (draggedOverRowIdx === undefined) return;\n    const { rowIdx } = selectedPosition;\n\n    const isDraggedOver =\n      rowIdx < draggedOverRowIdx\n        ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\n        : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function getDragHandle(rowIdx: number) {\n    if (\n      selectedPosition.rowIdx !== rowIdx ||\n      selectedPosition.mode === 'EDIT' ||\n      hasGroups || // drag fill is not supported when grouping is enabled\n      onFill == null\n    ) {\n      return;\n    }\n\n    return (\n      <DragHandle\n        rows={rawRows}\n        columns={columns}\n        selectedPosition={selectedPosition}\n        isCellEditable={isCellEditable}\n        latestDraggedOverRowIdx={latestDraggedOverRowIdx}\n        onRowsChange={onRowsChange}\n        onFill={onFill}\n        setDragging={setDragging}\n        setDraggedOverRowIdx={setDraggedOverRowIdx}\n      />\n    );\n  }\n\n  function getCellEditor(rowIdx: number) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'SELECT') return;\n\n    const { idx, row } = selectedPosition;\n    const column = columns[idx];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n\n    return (\n      <EditCell\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        onRowChange={handleEditorRowChange}\n        onClose={handleOnClose}\n      />\n    );\n  }\n\n  function getViewportRows() {\n    const rowElements = [];\n    let startRowIndex = 0;\n\n    const { idx: selectedIdx, rowIdx: selectedRowIdx } = selectedPosition;\n    const startRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx\n        ? rowOverscanStartIdx - 1\n        : rowOverscanStartIdx;\n    const endRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx\n        ? rowOverscanEndIdx + 1\n        : rowOverscanEndIdx;\n\n    for (let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++) {\n      const isRowOutsideViewport =\n        viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n\n      let rowColumns = viewportColumns;\n      const selectedColumn = columns[selectedIdx];\n      // selectedIdx can be -1 if grouping is enabled\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (selectedColumn !== undefined) {\n        if (isRowOutsideViewport) {\n          // if the row is outside the viewport then only render the selected cell\n          rowColumns = [selectedColumn];\n        } else if (selectedRowIdx === rowIdx && !viewportColumns.includes(selectedColumn)) {\n          // if the row is within the viewport and cell is not, add the selected column to viewport columns\n          rowColumns =\n            selectedIdx > viewportColumns[viewportColumns.length - 1].idx\n              ? [...viewportColumns, selectedColumn]\n              : [\n                  ...viewportColumns.slice(0, lastFrozenColumnIndex + 1),\n                  selectedColumn,\n                  ...viewportColumns.slice(lastFrozenColumnIndex + 1)\n                ];\n        }\n      }\n\n      const row = rows[rowIdx];\n      const top = getRowTop(rowIdx) + headerRowHeight;\n      if (isGroupRow(row)) {\n        ({ startRowIndex } = row);\n        const isGroupRowSelected =\n          isSelectable && row.childRows.every((cr) => selectedRows.has(rowKeyGetter!(cr)));\n        rowElements.push(\n          <GroupRowRenderer\n            aria-level={row.level + 1} // aria-level is 1-based\n            aria-setsize={row.setSize}\n            aria-posinset={row.posInSet + 1} // aria-posinset is 1-based\n            aria-rowindex={headerRowsCount + startRowIndex + 1} // aria-rowindex is 1 based\n            aria-selected={isSelectable ? isGroupRowSelected : undefined}\n            key={row.id}\n            id={row.id}\n            groupKey={row.groupKey}\n            viewportColumns={rowColumns}\n            childRows={row.childRows}\n            rowIdx={rowIdx}\n            row={row}\n            top={top}\n            height={getRowHeight(rowIdx)}\n            level={row.level}\n            isExpanded={row.isExpanded}\n            selectedCellIdx={selectedRowIdx === rowIdx ? selectedIdx : undefined}\n            isRowSelected={isGroupRowSelected}\n            selectGroup={selectGroupLatest}\n            toggleGroup={toggleGroupLatest}\n          />\n        );\n        continue;\n      }\n\n      startRowIndex++;\n      let key;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      } else {\n        key = hasGroups ? startRowIndex : rowIdx;\n      }\n\n      rowElements.push(\n        <RowRenderer\n          aria-rowindex={headerRowsCount + (hasGroups ? startRowIndex : rowIdx) + 1} // aria-rowindex is 1 based\n          aria-selected={isSelectable ? isRowSelected : undefined}\n          key={key}\n          rowIdx={rowIdx}\n          row={row}\n          viewportColumns={rowColumns}\n          isRowSelected={isRowSelected}\n          onRowClick={onRowClick}\n          onRowDoubleClick={onRowDoubleClick}\n          rowClass={rowClass}\n          top={top}\n          height={getRowHeight(rowIdx)}\n          copiedCellIdx={\n            copiedCell !== null && copiedCell.row === row\n              ? columns.findIndex((c) => c.key === copiedCell.columnKey)\n              : undefined\n          }\n          selectedCellIdx={selectedRowIdx === rowIdx ? selectedIdx : undefined}\n          draggedOverCellIdx={getDraggedOverCellIdx(rowIdx)}\n          setDraggedOverRowIdx={isDragging ? setDraggedOverRowIdx : undefined}\n          lastFrozenColumnIndex={lastFrozenColumnIndex}\n          onRowChange={handleFormatterRowChangeLatest}\n          selectCell={selectViewportCellLatest}\n          selectedCellDragHandle={getDragHandle(rowIdx)}\n          selectedCellEditor={getCellEditor(rowIdx)}\n        />\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\n    setSelectedPosition(initialPosition);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  if (\n    selectedPosition.mode === 'EDIT' &&\n    rows[selectedPosition.rowIdx] !== selectedPosition.originalRow\n  ) {\n    // Discard changes if rows are updated from outside\n    closeEditor();\n  }\n\n  return (\n    <div\n      role={hasGroups ? 'treegrid' : 'grid'}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={headerRowsCount + rowsCount + summaryRowsCount}\n      className={clsx(rootClassname, { [viewportDraggingClassname]: isDragging }, className)}\n      style={\n        {\n          ...style,\n          '--header-row-height': `${headerRowHeight}px`,\n          '--row-width': `${totalColumnWidth}px`,\n          '--summary-row-height': `${summaryRowHeight}px`,\n          ...layoutCssVars\n        } as unknown as React.CSSProperties\n      }\n      ref={gridRef}\n      onScroll={handleScroll}\n      onKeyDown={handleKeyDown}\n      data-testid={testId}\n    >\n      <HeaderRow\n        columns={viewportColumns}\n        onColumnResize={handleColumnResize}\n        allRowsSelected={allRowsSelected}\n        onAllRowsSelectionChange={selectAllRowsLatest}\n        sortColumns={sortColumns}\n        onSortColumnsChange={onSortColumnsChange}\n        lastFrozenColumnIndex={lastFrozenColumnIndex}\n        selectedCellIdx={isHeaderRowSelected ? selectedPosition.idx : undefined}\n        selectCell={selectHeaderCellLatest}\n        shouldFocusGrid={!selectedCellIsWithinSelectionBounds}\n      />\n      {rows.length === 0 && noRowsFallback ? (\n        noRowsFallback\n      ) : (\n        <>\n          <div style={{ height: max(totalRowHeight, clientHeight) }} />\n          <RowSelectionChangeProvider value={selectRowLatest}>\n            {getViewportRows()}\n          </RowSelectionChangeProvider>\n          {summaryRows?.map((row, rowIdx) => {\n            const isSummaryRowSelected =\n              selectedPosition.rowIdx === headerRowsCount + rows.length + rowIdx - 1;\n            return (\n              <SummaryRow\n                aria-rowindex={headerRowsCount + rowsCount + rowIdx + 1}\n                key={rowIdx}\n                rowIdx={rowIdx}\n                row={row}\n                bottom={summaryRowHeight * (summaryRows.length - 1 - rowIdx)}\n                viewportColumns={viewportColumns}\n                lastFrozenColumnIndex={lastFrozenColumnIndex}\n                selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                selectCell={selectSummaryCellLatest}\n              />\n            );\n          })}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default forwardRef(DataGrid) as <R, SR = unknown, K extends Key = Key>(\n  props: DataGridProps<R, SR, K> & RefAttributes<DataGridHandle>\n) => JSX.Element;\n","import { useRef, useState } from 'react';\nimport { useLayoutEffect } from './useLayoutEffect';\n\nexport function useGridDimensions(): [\n  ref: React.RefObject<HTMLDivElement>,\n  width: number,\n  height: number\n] {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [gridWidth, setGridWidth] = useState(1);\n  const [gridHeight, setGridHeight] = useState(1);\n\n  useLayoutEffect(() => {\n    const { ResizeObserver } = window;\n\n    // don't break in Node.js (SSR), jest/jsdom, and browsers that don't support ResizeObserver\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (ResizeObserver == null) return;\n\n    const resizeObserver = new ResizeObserver(() => {\n      // Get dimensions without scrollbars.\n      // The dimensions given by the callback entries in Firefox do not substract the scrollbar sizes.\n      const { clientWidth, clientHeight } = gridRef.current!;\n      // TODO: remove once fixed upstream\n      // we reduce width by 1px here to avoid layout issues in Chrome\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=1206298\n      setGridWidth(clientWidth - (devicePixelRatio % 1 === 0 ? 0 : 1));\n      setGridHeight(clientHeight);\n    });\n\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, gridWidth, gridHeight];\n}\n","import { useMemo } from 'react';\nimport { floor, max, min } from '../utils';\nimport type { GroupRow, Maybe, RowHeightArgs } from '../types';\n\ntype GroupByDictionary<TRow> = Record<\n  string,\n  {\n    readonly childRows: readonly TRow[];\n    readonly childGroups: readonly TRow[] | Readonly<GroupByDictionary<TRow>>;\n    readonly startRowIndex: number;\n  }\n>;\n\ninterface ViewportRowsArgs<R> {\n  rawRows: readonly R[];\n  rowHeight: number | ((args: RowHeightArgs<R>) => number);\n  clientHeight: number;\n  scrollTop: number;\n  groupBy: readonly string[];\n  rowGrouper: Maybe<(rows: readonly R[], columnKey: string) => Record<string, readonly R[]>>;\n  expandedGroupIds: Maybe<ReadonlySet<unknown>>;\n  enableVirtualization: boolean;\n}\n\n// TODO: https://github.com/microsoft/TypeScript/issues/41808\nfunction isReadonlyArray(arr: unknown): arr is readonly unknown[] {\n  return Array.isArray(arr);\n}\n\nexport function useViewportRows<R>({\n  rawRows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  groupBy,\n  rowGrouper,\n  expandedGroupIds,\n  enableVirtualization\n}: ViewportRowsArgs<R>) {\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0 || rowGrouper == null) return [undefined, rawRows.length];\n\n    const groupRows = (\n      rows: readonly R[],\n      [groupByKey, ...remainingGroupByKeys]: readonly string[],\n      startRowIndex: number\n    ): [Readonly<GroupByDictionary<R>>, number] => {\n      let groupRowsCount = 0;\n      const groups: GroupByDictionary<R> = {};\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        // Recursively group each parent group\n        const [childGroups, childRowsCount] =\n          remainingGroupByKeys.length === 0\n            ? [childRows, childRows.length]\n            : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1); // 1 for parent row\n        groups[key] = { childRows, childGroups, startRowIndex: startRowIndex + groupRowsCount };\n        groupRowsCount += childRowsCount + 1; // 1 for parent row\n      }\n\n      return [groups, groupRowsCount];\n    };\n\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n\n  const [rows, isGroupRow] = useMemo((): [\n    ReadonlyArray<R | GroupRow<R>>,\n    (row: R | GroupRow<R>) => row is GroupRow<R>\n  ] => {\n    const allGroupRows = new Set<unknown>();\n    if (!groupedRows) return [rawRows, isGroupRow];\n\n    const flattenedRows: Array<R | GroupRow<R>> = [];\n    const expandGroup = (\n      rows: GroupByDictionary<R> | readonly R[],\n      parentId: string | undefined,\n      level: number\n    ): void => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        // TODO: should users have control over the generated key?\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = expandedGroupIds?.has(id) ?? false;\n        const { childRows, childGroups, startRowIndex } = rows[groupKey];\n\n        const groupRow: GroupRow<R> = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, isGroupRow];\n\n    function isGroupRow(row: R | GroupRow<R>): row is GroupRow<R> {\n      return allGroupRows.has(row);\n    }\n  }, [expandedGroupIds, groupedRows, rawRows]);\n\n  const { totalRowHeight, getRowTop, getRowHeight, findRowIdx } = useMemo(() => {\n    if (typeof rowHeight === 'number') {\n      return {\n        totalRowHeight: rowHeight * rows.length,\n        getRowTop: (rowIdx: number) => rowIdx * rowHeight,\n        getRowHeight: () => rowHeight,\n        findRowIdx: (offset: number) => floor(offset / rowHeight)\n      };\n    }\n\n    let totalRowHeight = 0;\n    // Calcule the height of all the rows upfront. This can cause performance issues\n    // and we can consider using a similar approach as react-window\n    // https://github.com/bvaughn/react-window/blob/b0a470cc264e9100afcaa1b78ed59d88f7914ad4/src/VariableSizeList.js#L68\n    const rowPositions = rows.map((row: R | GroupRow<R>) => {\n      const currentRowHeight = isGroupRow(row)\n        ? rowHeight({ type: 'GROUP', row })\n        : rowHeight({ type: 'ROW', row });\n      const position = { top: totalRowHeight, height: currentRowHeight };\n      totalRowHeight += currentRowHeight;\n      return position;\n    });\n\n    const validateRowIdx = (rowIdx: number) => {\n      return max(0, min(rows.length - 1, rowIdx));\n    };\n\n    return {\n      totalRowHeight,\n      getRowTop: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].top,\n      getRowHeight: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].height,\n      findRowIdx(offset: number) {\n        let start = 0;\n        let end = rowPositions.length - 1;\n        while (start <= end) {\n          const middle = start + floor((end - start) / 2);\n          const currentOffset = rowPositions[middle].top;\n\n          if (currentOffset === offset) return middle;\n\n          if (currentOffset < offset) {\n            start = middle + 1;\n          } else if (currentOffset > offset) {\n            end = middle - 1;\n          }\n\n          if (start > end) return end;\n        }\n        return 0;\n      }\n    };\n  }, [isGroupRow, rowHeight, rows]);\n\n  if (!enableVirtualization) {\n    return {\n      rowOverscanStartIdx: 0,\n      rowOverscanEndIdx: rows.length - 1,\n      rows,\n      rowsCount,\n      totalRowHeight,\n      isGroupRow,\n      getRowTop,\n      getRowHeight,\n      findRowIdx\n    };\n  }\n\n  const overscanThreshold = 4;\n  const rowVisibleStartIdx = findRowIdx(scrollTop);\n  const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n  const rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n  const rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  };\n}\n","import { useMemo } from 'react';\n\nimport { getColSpan } from '../utils';\nimport type { CalculatedColumn, GroupRow, Maybe } from '../types';\n\ninterface ViewportColumnsArgs<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  summaryRows: Maybe<readonly SR[]>;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  lastFrozenColumnIndex: number;\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function useViewportColumns<R, SR>({\n  columns,\n  colSpanColumns,\n  rows,\n  summaryRows,\n  colOverscanStartIdx,\n  colOverscanEndIdx,\n  lastFrozenColumnIndex,\n  rowOverscanStartIdx,\n  rowOverscanEndIdx,\n  isGroupRow\n}: ViewportColumnsArgs<R, SR>) {\n  // find the column that spans over a column within the visible columns range and adjust colOverscanStartIdx\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n\n    let startIdx = colOverscanStartIdx;\n\n    const updateStartIdx = (colIdx: number, colSpan: number | undefined) => {\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n        startIdx = colIdx;\n        return true;\n      }\n      return false;\n    };\n\n    for (const column of colSpanColumns) {\n      // check header row\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' }))) {\n        break;\n      }\n\n      // check viewport rows\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (isGroupRow(row)) continue;\n        if (\n          updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row }))\n        ) {\n          break;\n        }\n      }\n\n      // check summary rows\n      if (summaryRows != null) {\n        for (const row of summaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n    }\n\n    return startIdx;\n  }, [\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    summaryRows,\n    colOverscanStartIdx,\n    lastFrozenColumnIndex,\n    colSpanColumns,\n    isGroupRow\n  ]);\n\n  return useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n    }\n\n    return viewportColumns;\n  }, [startIdx, colOverscanEndIdx, columns]);\n}\n","import { css } from '@linaria/core';\nimport { row } from './row';\n\nconst lightTheme = `\n  --color: #000;\n  --border-color: #ddd;\n  --summary-border-color: #aaa;\n  --background-color: hsl(0deg 0% 100%);\n  --header-background-color: hsl(0deg 0% 97.5%);\n  --row-hover-background-color: hsl(0deg 0% 96%);\n  --row-selected-background-color: hsl(207deg 76% 92%);\n  --row-selected-hover-background-color: hsl(207deg 76% 88%);\n\n  --checkbox-color: hsl(207deg 100% 29%);\n  --checkbox-focus-color: hsl(207deg 100% 69%);\n  --checkbox-disabled-border-color: #ccc;\n  --checkbox-disabled-background-color: #ddd;\n`;\n\nconst darkTheme = `\n  --color: #ddd;\n  --border-color: #444;\n  --summary-border-color: #555;\n  --background-color: hsl(0deg 0% 13%);\n  --header-background-color: hsl(0deg 0% 10.5%);\n  --row-hover-background-color: hsl(0deg 0% 9%);\n  --row-selected-background-color: hsl(207deg 76% 42%);\n  --row-selected-hover-background-color: hsl(207deg 76% 38%);\n\n  --checkbox-color: hsl(207deg 100% 79%);\n  --checkbox-focus-color: hsl(207deg 100% 89%);\n  --checkbox-disabled-border-color: #000;\n  --checkbox-disabled-background-color: #333;\n`;\n\nconst root = css`\n  ${lightTheme}\n  --selection-color: #66afe9;\n  --font-size: 14px;\n\n  color-scheme: var(--color-scheme, light dark);\n\n  /* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context */\n  /* We set a stacking context so internal elements don't render on top of external components. */\n  contain: strict;\n  contain: size layout style paint;\n  content-visibility: auto;\n  height: 350px;\n  border: 1px solid var(--border-color);\n  box-sizing: border-box;\n  overflow: auto;\n  user-select: none;\n  background-color: var(--background-color);\n  color: var(--color);\n  font-size: var(--font-size);\n  direction: ltr;\n\n  /* set stacking context in safari */\n  @supports not (contain: strict) {\n    position: relative;\n    z-index: 0;\n  }\n\n  *,\n  *::before,\n  *::after {\n    box-sizing: inherit;\n  }\n\n  &.rdg-dark {\n    --color-scheme: dark;\n    ${darkTheme}\n  }\n\n  &.rdg-light {\n    --color-scheme: light;\n  }\n\n  @media (prefers-color-scheme: dark) {\n    &:not(.rdg-light) {\n      ${darkTheme}\n    }\n  }\n`;\n\nexport const rootClassname = `rdg ${root}`;\n\nconst viewportDragging = css`\n  &.${row} {\n    cursor: move;\n  }\n`;\n\nexport const viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { getCellStyle, getCellClassname, isCellEditable } from './utils';\nimport type { CellRendererProps } from './types';\nimport { useRovingCellRef } from './hooks';\n\nconst cellCopied = css`\n  background-color: #ccccff;\n`;\n\nconst cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;\n\nconst cellDraggedOver = css`\n  background-color: #ccccff;\n\n  &.${cellCopied} {\n    background-color: #9999ff;\n  }\n`;\n\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\n\nfunction Cell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  row,\n  dragHandle,\n  onRowClick,\n  onRowDoubleClick,\n  onRowChange,\n  selectCell,\n  ...props\n}: CellRendererProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    {\n      [cellCopiedClassname]: isCopied,\n      [cellDraggedOverClassname]: isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  function selectCellWrapper(openEditor?: boolean | null) {\n    selectCell(row, column, openEditor);\n  }\n\n  function handleClick() {\n    selectCellWrapper(column.editorOptions?.editOnClick);\n    onRowClick?.(row, column);\n  }\n\n  function handleContextMenu() {\n    selectCellWrapper();\n  }\n\n  function handleDoubleClick() {\n    selectCellWrapper(true);\n    onRowDoubleClick?.(row, column);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected={isCellSelected}\n      aria-colspan={colSpan}\n      aria-readonly={!isCellEditable(column, row) || undefined}\n      ref={ref}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={handleClick}\n      onDoubleClick={handleDoubleClick}\n      onContextMenu={handleContextMenu}\n      onFocus={onFocus}\n      {...props}\n    >\n      {!column.rowGroup && (\n        <>\n          <column.formatter\n            column={column}\n            row={row}\n            isCellSelected={isCellSelected}\n            onRowChange={onRowChange}\n          />\n          {dragHandle}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default memo(Cell) as <R, SR>(props: CellRendererProps<R, SR>) => JSX.Element;\n","import { memo, forwardRef } from 'react';\nimport type { RefAttributes, CSSProperties } from 'react';\nimport clsx from 'clsx';\n\nimport Cell from './Cell';\nimport { RowSelectionProvider, useLatestFunc, useCombinedRefs, useRovingRowRef } from './hooks';\nimport { getColSpan } from './utils';\nimport { rowClassname } from './style';\nimport type { RowRendererProps } from './types';\n\nfunction Row<R, SR>(\n  {\n    className,\n    rowIdx,\n    selectedCellIdx,\n    isRowSelected,\n    copiedCellIdx,\n    draggedOverCellIdx,\n    lastFrozenColumnIndex,\n    row,\n    viewportColumns,\n    selectedCellEditor,\n    selectedCellDragHandle,\n    onRowClick,\n    onRowDoubleClick,\n    rowClass,\n    setDraggedOverRowIdx,\n    onMouseEnter,\n    top,\n    height,\n    onRowChange,\n    selectCell,\n    ...props\n  }: RowRendererProps<R, SR>,\n  ref: React.Ref<HTMLDivElement>\n) {\n  const { ref: rowRef, tabIndex, className: rovingClassName } = useRovingRowRef(selectedCellIdx);\n\n  const handleRowChange = useLatestFunc((newRow: R) => {\n    onRowChange(rowIdx, newRow);\n  });\n\n  function handleDragEnter(event: React.MouseEvent<HTMLDivElement>) {\n    setDraggedOverRowIdx?.(rowIdx);\n    onMouseEnter?.(event);\n  }\n\n  className = clsx(\n    rowClassname,\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n    rovingClassName,\n    rowClass?.(row),\n    className\n  );\n\n  const cells = [];\n\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const { idx } = column;\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === idx;\n\n    if (isCellSelected && selectedCellEditor) {\n      cells.push(selectedCellEditor);\n    } else {\n      cells.push(\n        <Cell\n          key={column.key}\n          column={column}\n          colSpan={colSpan}\n          row={row}\n          isCopied={copiedCellIdx === idx}\n          isDraggedOver={draggedOverCellIdx === idx}\n          isCellSelected={isCellSelected}\n          dragHandle={isCellSelected ? selectedCellDragHandle : undefined}\n          onRowClick={onRowClick}\n          onRowDoubleClick={onRowDoubleClick}\n          onRowChange={handleRowChange}\n          selectCell={selectCell}\n        />\n      );\n    }\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        ref={useCombinedRefs(ref, rowRef)}\n        tabIndex={tabIndex}\n        className={className}\n        onMouseEnter={handleDragEnter}\n        style={\n          {\n            top,\n            '--row-height': `${height}px`\n          } as unknown as CSSProperties\n        }\n        {...props}\n      >\n        {cells}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nexport default memo(Row) as <R, SR>(props: RowRendererProps<R, SR>) => JSX.Element;\n\nexport const RowWithRef = memo(forwardRef(Row)) as <R, SR>(\n  props: RowRendererProps<R, SR> & RefAttributes<HTMLDivElement>\n) => JSX.Element;\n","import clsx from 'clsx';\nimport { css } from '@linaria/core';\nimport { useFocusRef } from '../hooks/useFocusRef';\n\nconst checkboxLabel = css`\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  inset: 0;\n  margin-right: 1px; /* align checkbox in row group cell */\n`;\n\nconst checkboxLabelClassname = `rdg-checkbox-label ${checkboxLabel}`;\n\nconst checkboxInput = css`\n  all: unset;\n  width: 0;\n  margin: 0;\n`;\n\nconst checkboxInputClassname = `rdg-checkbox-input ${checkboxInput}`;\n\nconst checkbox = css`\n  content: '';\n  width: 20px;\n  height: 20px;\n  border: 2px solid var(--border-color);\n  background-color: var(--background-color);\n\n  .${checkboxInput}:checked + & {\n    background-color: var(--checkbox-color);\n    box-shadow: inset 0px 0px 0px 4px var(--background-color);\n  }\n\n  .${checkboxInput}:focus + & {\n    border-color: var(--checkbox-focus-color);\n  }\n`;\n\nconst checkboxClassname = `rdg-checkbox ${checkbox}`;\n\nconst checkboxLabelDisabled = css`\n  cursor: default;\n\n  .${checkbox} {\n    border-color: var(--checkbox-disabled-border-color);\n    background-color: var(--checkbox-disabled-background-color);\n  }\n`;\n\nconst checkboxLabelDisabledClassname = `rdg-checkbox-label-disabled ${checkboxLabelDisabled}`;\n\ntype SharedInputProps = Pick<\n  React.InputHTMLAttributes<HTMLInputElement>,\n  'disabled' | 'onClick' | 'aria-label' | 'aria-labelledby'\n>;\n\ninterface SelectCellFormatterProps extends SharedInputProps {\n  isCellSelected: boolean;\n  value: boolean;\n  onChange: (value: boolean, isShiftClick: boolean) => void;\n}\n\nexport function SelectCellFormatter({\n  value,\n  isCellSelected,\n  disabled,\n  onClick,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const { ref, tabIndex } = useFocusRef<HTMLInputElement>(isCellSelected);\n\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n  }\n\n  return (\n    <label className={clsx(checkboxLabelClassname, { [checkboxLabelDisabledClassname]: disabled })}>\n      <input\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabelledBy}\n        ref={ref}\n        type=\"checkbox\"\n        tabIndex={tabIndex}\n        className={checkboxInputClassname}\n        disabled={disabled}\n        checked={value}\n        onChange={handleChange}\n        onClick={onClick}\n      />\n      <div className={checkboxClassname} />\n    </label>\n  );\n}\n","import { css } from '@linaria/core';\nimport { useFocusRef } from '../hooks';\nimport type { HeaderRendererProps } from '../types';\n\nconst headerSortCell = css`\n  cursor: pointer;\n  display: flex;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst headerSortCellClassname = `rdg-header-sort-cell ${headerSortCell}`;\n\nconst headerSortName = css`\n  flex-grow: 1;\n  overflow: hidden;\n  overflow: clip;\n  text-overflow: ellipsis;\n`;\n\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\n\nconst arrow = css`\n  fill: currentColor;\n\n  > path {\n    transition: d 0.1s;\n  }\n`;\n\nconst arrowClassname = `rdg-sort-arrow ${arrow}`;\n\ntype SharedHeaderCellProps<R, SR> = Pick<\n  HeaderRendererProps<R, SR>,\n  'sortDirection' | 'onSort' | 'priority' | 'isCellSelected'\n>;\n\ninterface Props<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nexport default function SortableHeaderCell<R, SR>({\n  onSort,\n  sortDirection,\n  priority,\n  children,\n  isCellSelected\n}: Props<R, SR>) {\n  const { ref, tabIndex } = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLSpanElement>) {\n    if (event.key === ' ' || event.key === 'Enter') {\n      // stop propagation to prevent scrolling\n      event.preventDefault();\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function handleClick(event: React.MouseEvent<HTMLSpanElement>) {\n    onSort(event.ctrlKey || event.metaKey);\n  }\n\n  return (\n    <span\n      ref={ref}\n      tabIndex={tabIndex}\n      className={headerSortCellClassname}\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n    >\n      <span className={headerSortNameClassname}>{children}</span>\n      <span>\n        {sortDirection !== undefined && (\n          <svg viewBox=\"0 0 12 8\" width=\"12\" height=\"8\" className={arrowClassname} aria-hidden>\n            <path d={sortDirection === 'ASC' ? 'M0 8 6 0 12 8' : 'M0 0 6 8 12 0'} />\n          </svg>\n        )}\n        {priority}\n      </span>\n    </span>\n  );\n}\n","import { useCallback } from 'react';\n\nexport function useCombinedRefs<T>(...refs: readonly React.Ref<T>[]) {\n  return useCallback(\n    (handle: T | null) => {\n      for (const ref of refs) {\n        if (typeof ref === 'function') {\n          ref(handle);\n        } else if (ref !== null && 'current' in ref) {\n          // @ts-expect-error: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065\n          ref.current = handle;\n        }\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    refs\n  );\n}\n","import { useRef } from 'react';\nimport { useLayoutEffect } from './useLayoutEffect';\n\nexport function useFocusRef<T extends HTMLOrSVGElement>(isSelected: boolean) {\n  const ref = useRef<T>(null);\n\n  useLayoutEffect(() => {\n    if (!isSelected) return;\n    ref.current?.focus({ preventScroll: true });\n  }, [isSelected]);\n\n  return {\n    ref,\n    tabIndex: isSelected ? 0 : -1\n  };\n}\n","import { useRef, useEffect, useCallback } from 'react';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends (...args: any[]) => any>(fn: T) {\n  const ref = useRef(fn);\n\n  useEffect(() => {\n    ref.current = fn;\n  });\n\n  return useCallback((...args: Parameters<T>) => {\n    ref.current(...args);\n  }, []);\n}\n","// eslint-disable-next-line no-restricted-imports\nimport { useEffect, useLayoutEffect as useOriginalLayoutEffect } from 'react';\n\n// Silence silly warning\n// https://reactjs.org/link/uselayouteffect-ssr\nexport const useLayoutEffect = typeof window === 'undefined' ? useEffect : useOriginalLayoutEffect;\n","import { useRef, useState } from 'react';\nimport { useLayoutEffect } from './useLayoutEffect';\n\n// https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_roving_tabindex\nexport function useRovingCellRef(isSelected: boolean) {\n  const ref = useRef<HTMLDivElement>(null);\n  // https://www.w3.org/TR/wai-aria-practices-1.1/#gridNav_focus\n  const isChildFocused = useRef(false);\n  const [, forceRender] = useState<unknown>({});\n\n  useLayoutEffect(() => {\n    if (!isSelected) {\n      isChildFocused.current = false;\n      return;\n    }\n\n    if (isChildFocused.current) {\n      // When the child is focused, we need to rerender\n      // the cell again so tabIndex is updated to -1\n      forceRender({});\n      return;\n    }\n    ref.current?.focus();\n  }, [isSelected]);\n\n  function onFocus(event: React.FocusEvent<HTMLDivElement>) {\n    if (event.target !== ref.current) {\n      isChildFocused.current = true;\n    }\n  }\n\n  const isFocused = isSelected && !isChildFocused.current;\n\n  return {\n    ref,\n    tabIndex: isFocused ? 0 : -1,\n    onFocus\n  };\n}\n","import { css } from '@linaria/core';\n\nimport { cell } from '../style';\nimport { useFocusRef } from './useFocusRef';\n\nconst rowSelected = css`\n  outline: none;\n\n  &::after {\n    content: '';\n    position: absolute;\n    inset: 0;\n    box-shadow: inset 0 0 0 2px var(--selection-color);\n    pointer-events: none;\n    z-index: 2;\n  }\n\n  > .${cell}:first-child {\n    /* preserve left border on the first frozen cell after scrolling to the right */\n    box-shadow: inset 2px 0 0 0 var(--selection-color);\n  }\n`;\n\nexport const rowSelectedClassname = `rdg-row-selected ${rowSelected}`;\n\nexport function useRovingRowRef(selectedCellIdx: number | undefined) {\n  const isSelected = selectedCellIdx === -1;\n  const { ref, tabIndex } = useFocusRef<HTMLDivElement>(isSelected);\n\n  return {\n    ref,\n    tabIndex,\n    className: isSelected ? rowSelectedClassname : undefined\n  };\n}\n","import { createContext, useContext } from 'react';\nimport type { SelectRowEvent } from '../types';\n\nconst RowSelectionContext = createContext<boolean | undefined>(undefined);\n\nexport const RowSelectionProvider = RowSelectionContext.Provider;\n\nconst RowSelectionChangeContext = createContext<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ((selectRowEvent: SelectRowEvent<any>) => void) | undefined\n>(undefined);\n\nexport const RowSelectionChangeProvider = RowSelectionChangeContext.Provider;\n\nexport function useRowSelection<R>(): [boolean, (selectRowEvent: SelectRowEvent<R>) => void] {\n  const rowSelectionContext = useContext(RowSelectionContext);\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext);\n\n  if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n    throw new Error('useRowSelection must be used within DataGrid cells');\n  }\n\n  return [rowSelectionContext, rowSelectionChangeContext];\n}\n","import { css } from '@linaria/core';\n\nexport const row = css`\n  contain: strict;\n  contain: size layout style paint;\n  display: grid;\n  grid-template-rows: var(--row-height);\n  grid-template-columns: var(--template-columns);\n  position: absolute;\n  left: 0;\n  width: var(--row-width);\n  height: var(--row-height); /* needed on Firefox */\n  line-height: var(--row-height);\n  background-color: var(--background-color);\n\n  &:hover {\n    background-color: var(--row-hover-background-color);\n  }\n\n  &[aria-selected='true'] {\n    background-color: var(--row-selected-background-color);\n\n    &:hover {\n      background-color: var(--row-selected-hover-background-color);\n    }\n  }\n`;\n\nexport const rowClassname = `rdg-row ${row}`;\n","import type { CalculatedColumn, ColSpanArgs } from '../types';\n\nexport function getColSpan<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  lastFrozenColumnIndex: number,\n  args: ColSpanArgs<R, SR>\n): number | undefined {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n  if (\n    Number.isInteger(colSpan) &&\n    colSpan! > 1 &&\n    // ignore colSpan if it spans over both frozen and regular columns\n    (!column.frozen || column.idx + colSpan! - 1 <= lastFrozenColumnIndex)\n  ) {\n    return colSpan!;\n  }\n  return undefined;\n}\n","export function stopPropagation(event: React.SyntheticEvent) {\n  event.stopPropagation();\n}\n","import clsx from 'clsx';\n\nimport type { CalculatedColumn } from '../types';\nimport { cellClassname, cellFrozenClassname, cellFrozenLastClassname } from '../style';\n\nexport * from './colSpanUtils';\nexport * from './domUtils';\nexport * from './keyboardUtils';\nexport * from './selectedCellUtils';\n\nexport const { min, max, floor, sign } = Math;\n\nexport function assertIsValidKeyGetter<R, K extends React.Key>(\n  keyGetter: unknown\n): asserts keyGetter is (row: R) => K {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n\nexport function getCellStyle<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  colSpan?: number\n): React.CSSProperties {\n  return {\n    gridColumnStart: column.idx + 1,\n    gridColumnEnd: colSpan !== undefined ? `span ${colSpan}` : undefined,\n    left: column.frozen ? `var(--frozen-left-${column.idx})` : undefined\n  };\n}\n\nexport function getCellClassname<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  ...extraClasses: Parameters<typeof clsx>\n): string {\n  return clsx(\n    cellClassname,\n    {\n      [cellFrozenClassname]: column.frozen,\n      [cellFrozenLastClassname]: column.isLastFrozenColumn\n    },\n    ...extraClasses\n  );\n}\n","import { css } from '@linaria/core';\n\nexport const cell = css`\n  contain: strict;\n  contain: size layout style paint;\n  padding: 0 8px;\n  border-right: 1px solid var(--border-color);\n  border-bottom: 1px solid var(--border-color);\n  background-color: inherit;\n\n  white-space: nowrap;\n  overflow: hidden;\n  overflow: clip;\n  text-overflow: ellipsis;\n  outline: none;\n\n  &[aria-selected='true'] {\n    box-shadow: inset 0 0 0 2px var(--selection-color);\n  }\n`;\n\nexport const cellClassname = `rdg-cell ${cell}`;\n\nconst cellFrozen = css`\n  position: sticky;\n  /* Should have a higher value than 0 to show up above unfrozen cells */\n  z-index: 1;\n`;\n\nexport const cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\n\nexport const cellFrozenLast = css`\n  box-shadow: 2px 0 5px -2px rgba(136, 136, 136, 0.3);\n`;\n\nexport const cellFrozenLastClassname = `rdg-cell-frozen-last ${cellFrozenLast}`;\n","import type { CalculatedColumn, Position, GroupRow, CellNavigationMode, Maybe } from '../types';\nimport { getColSpan } from './colSpanUtils';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function isSelectedCellEditable<R, SR>({\n  selectedPosition,\n  columns,\n  rows,\n  isGroupRow\n}: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return !isGroupRow(row) && isCellEditable(column, row);\n}\n\nexport function isCellEditable<R, SR>(column: CalculatedColumn<R, SR>, row: R): boolean {\n  return (\n    column.editor != null &&\n    !column.rowGroup &&\n    (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false\n  );\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  summaryRows: Maybe<readonly SR[]>;\n  minRowIdx: number;\n  maxRowIdx: number;\n  currentPosition: Position;\n  nextPosition: Position;\n  lastFrozenColumnIndex: number;\n  isCellWithinBounds: (position: Position) => boolean;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function getSelectedCellColSpan<R, SR>({\n  rows,\n  summaryRows,\n  rowIdx,\n  lastFrozenColumnIndex,\n  column,\n  isGroupRow\n}: Pick<\n  GetNextSelectedCellPositionOpts<R, SR>,\n  'rows' | 'summaryRows' | 'isGroupRow' | 'lastFrozenColumnIndex'\n> & {\n  rowIdx: number;\n  column: CalculatedColumn<R, SR>;\n}) {\n  if (rowIdx === -1) {\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n  }\n\n  if (rowIdx >= 0 && rowIdx < rows.length) {\n    const row = rows[rowIdx];\n    if (!isGroupRow(row)) {\n      return getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    }\n    return undefined;\n  }\n\n  if (summaryRows) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: summaryRows[rowIdx - rows.length]\n    });\n  }\n\n  return undefined;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({\n  cellNavigationMode,\n  columns,\n  colSpanColumns,\n  rows,\n  summaryRows,\n  minRowIdx,\n  maxRowIdx,\n  currentPosition: { idx: currentIdx },\n  nextPosition,\n  lastFrozenColumnIndex,\n  isCellWithinBounds,\n  isGroupRow\n}: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  let { idx: nextIdx, rowIdx: nextRowIdx } = nextPosition;\n\n  const setColSpan = (moveRight: boolean) => {\n    if (nextRowIdx >= 0 && nextRowIdx < rows.length) {\n      const row = rows[nextRowIdx];\n      if (isGroupRow(row)) return;\n    }\n    // If a cell within the colspan range is selected then move to the\n    // previous or the next cell depending on the navigation direction\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx > nextIdx) break;\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        summaryRows,\n        rowIdx: nextRowIdx,\n        lastFrozenColumnIndex,\n        column,\n        isGroupRow\n      });\n\n      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n        nextIdx = colIdx + (moveRight ? colSpan : 0);\n        break;\n      }\n    }\n  };\n\n  if (isCellWithinBounds(nextPosition)) {\n    setColSpan(nextIdx - currentIdx > 0);\n  }\n\n  if (cellNavigationMode !== 'NONE') {\n    const columnsCount = columns.length;\n    const isAfterLastColumn = nextIdx === columnsCount;\n    const isBeforeFirstColumn = nextIdx === -1;\n\n    if (isAfterLastColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isLastRow = nextRowIdx === maxRowIdx;\n        if (!isLastRow) {\n          nextIdx = 0;\n          nextRowIdx += 1;\n        }\n      } else {\n        nextIdx = 0;\n      }\n    } else if (isBeforeFirstColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isFirstRow = nextRowIdx === minRowIdx;\n        if (!isFirstRow) {\n          nextRowIdx -= 1;\n          nextIdx = columnsCount - 1;\n        }\n      } else {\n        nextIdx = columnsCount - 1;\n      }\n      setColSpan(false);\n    }\n  }\n\n  return { idx: nextIdx, rowIdx: nextRowIdx };\n}\n\ninterface CanExitGridOpts {\n  cellNavigationMode: CellNavigationMode;\n  maxColIdx: number;\n  minRowIdx: number;\n  maxRowIdx: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid({\n  cellNavigationMode,\n  maxColIdx,\n  minRowIdx,\n  maxRowIdx,\n  selectedPosition: { rowIdx, idx },\n  shiftKey\n}: CanExitGridOpts): boolean {\n  // When the cellNavigationMode is 'none' or 'changeRow', you can exit the grid if you're at the first or last cell of the grid\n  // When the cellNavigationMode is 'loopOverRow', there is no logical exit point so you can't exit the grid\n  if (cellNavigationMode === 'NONE' || cellNavigationMode === 'CHANGE_ROW') {\n    const atLastCellInRow = idx === maxColIdx;\n    const atFirstCellInRow = idx === 0;\n    const atLastRow = rowIdx === maxRowIdx;\n    const atFirstRow = rowIdx === minRowIdx;\n\n    return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n  }\n\n  return false;\n}\n"],"names":["SELECT_COLUMN_KEY","SelectColumn","key","name","width","maxWidth","resizable","sortable","frozen","headerRenderer","props","isCellSelected","value","allRowsSelected","onChange","onAllRowsSelectionChange","onClick","stopPropagation","formatter","isRowSelected","onRowSelectionChange","useRowSelection","checked","isShiftClick","row","groupFormatter","ValueFormatter","column","ToggleGroupFormatter","toggleGroup","tabIndex","useFocusRef","d","isExpanded","ref","className","onKeyDown","viewBox","height","getSpecifiedWidth","columnWidths","viewportWidth","has","get","test","floor","parseInt","clampColumnWidth","minWidth","minColumnWidth","max","min","HeaderCell","shouldFocusGrid","onFocus","useRovingCellRef","sortIndex","sortColumns","sort","sortColumn","sortDirection","priority","ariaSort","getCellClassname","onSortColumnsChange","sortDescendingFirst","nextSort","columnKey","direction","nextSortColumn","nextSortColumns","role","style","getCellStyle","selectCell","onPointerDown","event","pointerId","right","currentTarget","offset","onColumnResize","onSort","HeaderRow","useRovingRowRef","cells","index","columns","colSpan","getColSpan","lastFrozenColumnIndex","type","selectedCellIdx","clsx","memo","GroupCell","id","groupKey","childRows","groupColumnIndex","toggleGroupWrapper","isLevelMatching","rowGroup","idx","cursor","undefined","GroupedRow","viewportColumns","level","rowIdx","selectGroup","SummaryCell","summaryFormatter","SummaryFormatter","summaryCellClass","SummaryRow","ariaRowIndex","bottom","EditCell","onClose","frameRequestRef","useRef","commitOnOutsideMouseDown","useLatestFunc","onRowChange","cancelAnimationFrame","useEffect","requestAnimationFrame","addEventListener","onWindowCaptureMouseDown","capture","removeEventListener","cancelFrameRequest","cellClass","onMouseDownCapture","DragHandle","setDraggedOverRowIdx","sourceRow","rows","updatedRows","indexes","i","isCellEditable","updatedRow","onFill","targetRow","onRowsChange","onMouseDown","onMouseUp","window","setDragging","overRowIdx","latestDraggedOverRowIdx","updateRows","handleDragEnd","onDoubleClick","selectedPosition","nonInputKeys","Set","isCtrlKeyHeldDown","e","ctrlKey","metaKey","onEditorNavigation","target","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","matches","initialPosition","mode","DataGrid","rawColumns","rawRows","summaryRows","rowKeyGetter","rowHeight","headerRowHeight","rawHeaderRowHeight","summaryRowHeight","rawSummaryRowHeight","selectedRows","onSelectedRowsChange","defaultColumnOptions","groupBy","rawGroupBy","rowGrouper","expandedGroupIds","onExpandedGroupIdsChange","onRowClick","onRowDoubleClick","onScroll","onSelectedCellChange","onPaste","cellNavigationMode","rawCellNavigationMode","enableVirtualization","rowRenderer","noRowsFallback","rowClass","ariaLabel","ariaLabelledBy","ariaDescribedBy","testId","RowRenderer","Row","scrollTop","setScrollTop","useState","scrollLeft","setScrollLeft","setColumnWidths","Map","setSelectedPosition","copiedCell","setCopiedCell","isDragging","draggedOverRowIdx","setOverRowIdx","prevSelectedPosition","lastSelectedRowIdx","gridRef","gridWidth","gridHeight","setGridWidth","setGridHeight","useLayoutEffect","ResizeObserver","resizeObserver","clientWidth","clientHeight","current","devicePixelRatio","observe","disconnect","useGridDimensions","summaryRowsCount","length","isSelectable","isHeaderRowSelected","useMemo","size","every","colSpanColumns","colOverscanStartIdx","colOverscanEndIdx","layoutCssVars","columnMetrics","totalColumnWidth","totalFrozenColumnWidth","defaultFormatter","defaultSortable","defaultResizable","map","rawColumn","includes","isLastFrozenColumn","aKey","frozenA","bKey","frozenB","indexOf","forEach","push","left","templateColumns","allocatedWidth","unassignedColumnsCount","set","unallocatedColumnWidth","columnMetric","viewportLeft","viewportRight","lastColIdx","firstUnfrozenColumnIdx","colVisibleStartIdx","colVisibleEndIdx","useCalculatedColumns","rowOverscanStartIdx","rowOverscanEndIdx","rowsCount","totalRowHeight","isGroupRow","getRowTop","getRowHeight","findRowIdx","groupedRows","groupRows","groupByKey","remainingGroupByKeys","startRowIndex","groupRowsCount","groups","Object","entries","childGroups","childRowsCount","allGroupRows","flattenedRows","expandGroup","parentId","arr","Array","isArray","keys","posInSet","groupRow","setSize","add","rowPositions","currentRowHeight","position","top","validateRowIdx","start","end","middle","currentOffset","rowVisibleStartIdx","rowVisibleEndIdx","useViewportRows","startIdx","updateStartIdx","colIdx","useViewportColumns","hasGroups","minColIdx","maxColIdx","maxRowIdx","selectedCellIsWithinSelectionBounds","isCellWithinSelectionBounds","selectedCellIsWithinViewportBounds","isCellWithinViewportBounds","selectRowLatest","selectRow","selectAllRowsLatest","assertIsValidKeyGetter","newSelectedRows","rowKey","delete","handleFormatterRowChangeLatest","updateRow","selectViewportCellLatest","enableEditor","selectGroupLatest","selectHeaderCellLatest","selectSummaryCellLatest","summaryRow","toggleGroupLatest","scrollToCell","useImperativeHandle","element","scrollToColumn","scrollToRow","scrollTo","behavior","handleColumnResize","useCallback","newColumnWidths","childRow","previousRowIdx","step","sign","expandedGroupId","newExpandedGroupIds","getRawRowIdx","rawRowIdx","commitEditorChanges","editor","originalRow","handleEditorRowChange","commitChanges","closeEditor","handleOnClose","isColIdxWithinSelectionBounds","isRowIdxWithinViewportBounds","isSelectedCellEditable","getSelectedCellColSpan","isCellAtRightBoundary","rowTop","getDraggedOverCellIdx","currentRowIdx","getDragHandle","getCellEditor","Element","isCellEvent","closest","isRowEvent","keyCode","vKey","handleCopy","sourceColumnKey","targetColumnKey","handlePaste","preventDefault","editorOptions","onNavigation","shiftKey","canExitGrid","minRowIdx","nextPosition","parentRowIdx","parentRow","nextRowY","getNextPosition","getNextSelectedCellPosition","currentPosition","isCellWithinBounds","navigate","onCellKeyDown","isDefaultPrevented","isDefaultCellInput","handleCellInput","rowElements","selectedIdx","selectedRowIdx","endRowIdx","viewportRowIdx","isRowOutsideViewport","rowColumns","selectedColumn","slice","isGroupRowSelected","cr","GroupRow","copiedCellIdx","findIndex","c","draggedOverCellIdx","selectedCellDragHandle","selectedCellEditor","getViewportRows","isSummaryRowSelected","forwardRef","Cell","isDraggedOver","selectCellWrapper","onContextMenu","onMouseEnter","rowRef","rovingClassName","handleRowChange","newRow","rowClassname","isCopied","dragHandle","useCombinedRefs","RowWithRef","SelectCellFormatter","disabled","SortableHeaderCell","refs","handle","isSelected","focus","preventScroll","fn","args","useOriginalLayoutEffect","isChildFocused","forceRender","isFocused","RowSelectionContext","createContext","RowSelectionProvider","Provider","RowSelectionChangeContext","RowSelectionChangeProvider","rowSelectionContext","useContext","rowSelectionChangeContext","Error","Number","isInteger","Math","keyGetter","gridColumnStart","gridColumnEnd","extraClasses","editable","currentIdx","nextIdx","nextRowIdx","setColSpan","moveRight","columnsCount","isBeforeFirstColumn","atLastCellInRow","atFirstCellInRow","atLastRow","atFirstRow"],"sourceRoot":""}