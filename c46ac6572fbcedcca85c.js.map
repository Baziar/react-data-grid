{"version":3,"file":"c46ac6572fbcedcca85c.js","mappings":"iMAKA,MAAMA,EAAuB,IAAIC,MAAM,KAAMC,QAE7C,SAASC,EAAcC,GACrB,OACE,gCACGA,EAAMC,OAAOC,IADhB,IAC4BF,EAAMG,OAKvB,SAASC,IACtB,MAAMC,GAAUC,EAAAA,EAAAA,UAAQ,KACtB,MAAMD,EAAyB,GAE/B,IAAK,IAAIE,EAAI,EAAGA,EAAI,IAAMA,IAAK,CAC7B,MAAML,EAAMM,OAAOD,GACnBF,EAAQI,KAAK,CACXP,IAAAA,EACAQ,KAAMR,EACNS,OAAQJ,EAAI,EACZK,WAAW,EACXC,UAAWd,IAIf,OAAOM,IACN,IAEH,OAAO,SAAC,IAAD,CAAUA,QAASA,EAAST,KAAMA,EAAMkB,UAAW,GAAIC,UAAU,gB,gBCjC1E,SAASC,EAAMC,GACd,IAAIC,EAAGC,EAAGC,EAAI,GAEd,GAAmB,iBAARH,GAAmC,iBAARA,EACrCG,GAAOH,OACD,GAAmB,iBAARA,EACjB,GAAIpB,MAAMwB,QAAQJ,GACjB,IAAKC,EAAE,EAAGA,EAAID,EAAIK,OAAQJ,IACrBD,EAAIC,KACHC,EAAIH,EAAMC,EAAIC,OACjBE,IAAQA,GAAO,KACfA,GAAOD,QAKV,IAAKD,KAAKD,EACLA,EAAIC,KACPE,IAAQA,GAAO,KACfA,GAAOF,GAMX,OAAOE,EAGO,SAAS,IAEvB,IADA,IAASG,EAAKC,EAAVjB,EAAE,EAAWa,EAAI,GACdb,EAAIkB,UAAUH,SAChBC,EAAME,UAAUlB,QACfiB,EAAIR,EAAMO,MACbH,IAAQA,GAAO,KACfA,GAAOI,GAIV,OAAOJ,E","sources":["webpack://react-data-grid/./website/demos/MillionCells.tsx","webpack://react-data-grid/./node_modules/clsx/dist/clsx.m.js"],"sourcesContent":["import { useMemo } from 'react';\nimport DataGrid from '../../src';\nimport type { Column, FormatterProps } from '../../src';\n\ntype Row = number;\nconst rows: readonly Row[] = [...Array(1000).keys()];\n\nfunction CellFormatter(props: FormatterProps<Row>) {\n  return (\n    <>\n      {props.column.key}&times;{props.row}\n    </>\n  );\n}\n\nexport default function MillionCells() {\n  const columns = useMemo((): readonly Column<Row>[] => {\n    const columns: Column<Row>[] = [];\n\n    for (let i = 0; i < 1000; i++) {\n      const key = String(i);\n      columns.push({\n        key,\n        name: key,\n        frozen: i < 5,\n        resizable: true,\n        formatter: CellFormatter\n      });\n    }\n\n    return columns;\n  }, []);\n\n  return <DataGrid columns={columns} rows={rows} rowHeight={22} className=\"fill-grid\" />;\n}\n","function toVal(mix) {\n\tvar k, y, str='';\n\n\tif (typeof mix === 'string' || typeof mix === 'number') {\n\t\tstr += mix;\n\t} else if (typeof mix === 'object') {\n\t\tif (Array.isArray(mix)) {\n\t\t\tfor (k=0; k < mix.length; k++) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tif (y = toVal(mix[k])) {\n\t\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\t\tstr += y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (k in mix) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\tstr += k;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn str;\n}\n\nexport default function () {\n\tvar i=0, tmp, x, str='';\n\twhile (i < arguments.length) {\n\t\tif (tmp = arguments[i++]) {\n\t\t\tif (x = toVal(tmp)) {\n\t\t\t\tstr && (str += ' ');\n\t\t\t\tstr += x\n\t\t\t}\n\t\t}\n\t}\n\treturn str;\n}\n"],"names":["rows","Array","keys","CellFormatter","props","column","key","row","MillionCells","columns","useMemo","i","String","push","name","frozen","resizable","formatter","rowHeight","className","toVal","mix","k","y","str","isArray","length","tmp","x","arguments"],"sourceRoot":""}