{"version":3,"file":"b83fd0580f8dd499cd28.js","mappings":"2OAQA,MA4BMA,EAAS,CAAC,WAAD,sWAAf,iBA+BMC,EAAkC,CAAC,EAAD,EAEtC,CACEC,IADF,UAEEC,KAAM,WAER,CACED,IADF,OAEEC,KAAM,QAER,CACED,IADF,QAEEC,KAAM,SAER,CACED,IADF,UAEEC,KAAM,WAER,CACED,IADF,OAEEC,KAFF,OAGEC,eAAc,EAAC,UAAEC,MACR,8BAAGA,EAAAA,QAAiB,CAACC,GAAQC,KAAAA,KAAWD,EAArCD,GAAV,MAGJ,CACEH,IADF,SAEEC,KAFF,SAGEC,eAAc,EAAC,UAAEC,MACR,8BAAGA,EAAAA,QAAiB,CAACC,GAAQE,OAAAA,KAAaF,EAAvCD,GAAV,MAGJ,CACEH,IADF,SAEEC,KAFF,SAGEC,eAAc,EAAC,UAAEC,MACR,8BAAGA,EAAAA,QAAiB,CAACC,GAAQE,OAAAA,KAAaF,EAAvCD,GAAV,MAGJ,CACEH,IADF,QAEEC,KAFF,QAGEM,UAAS,EAAC,IAAEC,MACH,8BAAGA,EAAAA,KAAWA,EAAXA,OAAwBA,EAAlC,SAEFN,eAAc,EAAC,UAAEC,MACR,8BAAGA,EAAAA,QAAiB,CAACC,EAAMI,IAAQJ,EAAOI,EAAPJ,KAAkBI,EAAlBJ,OAA+BI,EAA/DL,QAAV,OAKN,SAASM,EAAaD,GACpB,OAAOA,EAAP,GAGF,SAASE,IACP,MAAMC,EAAN,GACA,IAAK,IAAIC,EAAT,EAAgBA,EAAhB,IAA2BA,IACzBD,EAAAA,KAAU,CACRE,GADQ,EAERC,KAAM,KAAOC,IAAAA,SAAAA,OAFL,GAGRC,QAASD,IAAAA,QAAAA,UACTE,MAAOnB,EAAOiB,IAAAA,SAAAA,OAAsBjB,EAAAA,OAJ5B,IAKRoB,QAASH,IAAAA,KAAAA,WACTV,KAAMU,IAAAA,SAAAA,OANE,GAORT,OAAQS,IAAAA,SAAAA,OAPA,GAQRI,OAAQJ,IAAAA,SAAAA,OAAAA,KAIZ,OAAOJ,EAAAA,MAAU,CAACS,EAAIC,IAAOA,EAAAA,QAAAA,cAAyBD,EAAtD,WAGF,MAAME,EAAU,CAAC,UAAW,OAAQ,QAApC,WAEe,SAASC,IACtB,MAAOZ,IAAQa,EAAAA,EAAAA,UAAf,IACOC,EAAcC,IAAmBF,EAAAA,EAAAA,WAA8B,IAAM,IAA5E,OACOG,EAAiBC,IAAsBJ,EAAAA,EAAAA,UAA4B,CACxEF,EADwE,GAExEA,EAFF,MAIOO,EAAkBC,IAAuBN,EAAAA,EAAAA,WAC9C,IAAM,IAAIO,IAAa,CAAC,2BAD1B,qCAoBA,OACE,iBAAKC,UAlKT,WAkKI,WACE,8CACA,gBAAKA,UAzJX,WAyJM,SACGV,EAAAA,KAAaW,IACZ,8BACE,kBACEC,KADF,WAEEC,QAASR,EAAAA,SAFX,GAGES,SAAWC,GAzBvB,cACE,MAAMC,EAAQX,EAAAA,QAAd,GACA,GACE,IAAIW,GACFV,GAAoBN,GAAY,MAAhCM,MAEG,IAAIU,GACTV,GAAoBN,IAClB,MAAMiB,EAAa,IAAnB,GAEA,OADAA,EAAAA,OAAAA,EAAAA,GACA,KAGJT,EAAoB,IAApBA,KAY+BU,CAAaP,EAAQI,EAAAA,OAH5C,WAIE,IACF,IANF,QAWJ,cACEtC,QADF,EAEEY,KAFF,EAGEF,aAHF,EAIEgB,aAJF,EAKEgB,qBALF,EAMEC,QANF,EAOEC,WAPF,UAQEd,iBARF,EASEe,yBATF,EAUEC,qBAAsB,CAAEC,WAAW,Q","sources":["webpack://react-data-grid/website/demos/Grouping.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { groupBy as rowGrouper } from 'lodash';\nimport faker from 'faker';\nimport { css } from '@linaria/core';\n\nimport DataGrid, { SelectColumn } from '../../src';\nimport type { Column } from '../../src';\n\nconst groupingClassname = css`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  gap: 8px;\n\n  > .rdg {\n    flex: 1;\n  }\n`;\n\nconst optionsClassname = css`\n  display: flex;\n  gap: 8px;\n  text-transform: capitalize;\n`;\n\ninterface Row {\n  id: number;\n  country: string;\n  year: number;\n  sport: string;\n  athlete: string;\n  gold: number;\n  silver: number;\n  bronze: number;\n}\n\nconst sports = [\n  'Swimming',\n  'Gymnastics',\n  'Speed Skating',\n  'Cross Country Skiing',\n  'Short-Track Speed Skating',\n  'Diving',\n  'Cycling',\n  'Biathlon',\n  'Alpine Skiing',\n  'Ski Jumping',\n  'Nordic Combined',\n  'Athletics',\n  'Table Tennis',\n  'Tennis',\n  'Synchronized Swimming',\n  'Shooting',\n  'Rowing',\n  'Fencing',\n  'Equestrian',\n  'Canoeing',\n  'Bobsleigh',\n  'Badminton',\n  'Archery',\n  'Wrestling',\n  'Weightlifting',\n  'Waterpolo',\n  'Wrestling',\n  'Weightlifting'\n];\n\nconst columns: readonly Column<Row>[] = [\n  SelectColumn,\n  {\n    key: 'country',\n    name: 'Country'\n  },\n  {\n    key: 'year',\n    name: 'Year'\n  },\n  {\n    key: 'sport',\n    name: 'Sport'\n  },\n  {\n    key: 'athlete',\n    name: 'Athlete'\n  },\n  {\n    key: 'gold',\n    name: 'Gold',\n    groupFormatter({ childRows }) {\n      return <>{childRows.reduce((prev, { gold }) => prev + gold, 0)}</>;\n    }\n  },\n  {\n    key: 'silver',\n    name: 'Silver',\n    groupFormatter({ childRows }) {\n      return <>{childRows.reduce((prev, { silver }) => prev + silver, 0)}</>;\n    }\n  },\n  {\n    key: 'bronze',\n    name: 'Bronze',\n    groupFormatter({ childRows }) {\n      return <>{childRows.reduce((prev, { silver }) => prev + silver, 0)}</>;\n    }\n  },\n  {\n    key: 'total',\n    name: 'Total',\n    formatter({ row }) {\n      return <>{row.gold + row.silver + row.bronze}</>;\n    },\n    groupFormatter({ childRows }) {\n      return <>{childRows.reduce((prev, row) => prev + row.gold + row.silver + row.bronze, 0)}</>;\n    }\n  }\n];\n\nfunction rowKeyGetter(row: Row) {\n  return row.id;\n}\n\nfunction createRows(): readonly Row[] {\n  const rows: Row[] = [];\n  for (let i = 1; i < 10000; i++) {\n    rows.push({\n      id: i,\n      year: 2015 + faker.datatype.number(3),\n      country: faker.address.country(),\n      sport: sports[faker.datatype.number(sports.length - 1)],\n      athlete: faker.name.findName(),\n      gold: faker.datatype.number(5),\n      silver: faker.datatype.number(5),\n      bronze: faker.datatype.number(5)\n    });\n  }\n\n  return rows.sort((r1, r2) => r2.country.localeCompare(r1.country));\n}\n\nconst options = ['country', 'year', 'sport', 'athlete'] as const;\n\nexport default function Grouping() {\n  const [rows] = useState(createRows);\n  const [selectedRows, setSelectedRows] = useState<ReadonlySet<number>>(() => new Set());\n  const [selectedOptions, setSelectedOptions] = useState<readonly string[]>([\n    options[0],\n    options[1]\n  ]);\n  const [expandedGroupIds, setExpandedGroupIds] = useState<ReadonlySet<unknown>>(\n    () => new Set<unknown>(['United States of America', 'United States of America__2015'])\n  );\n\n  function toggleOption(option: string, enabled: boolean) {\n    const index = selectedOptions.indexOf(option);\n    if (enabled) {\n      if (index === -1) {\n        setSelectedOptions((options) => [...options, option]);\n      }\n    } else if (index !== -1) {\n      setSelectedOptions((options) => {\n        const newOptions = [...options];\n        newOptions.splice(index, 1);\n        return newOptions;\n      });\n    }\n    setExpandedGroupIds(new Set());\n  }\n\n  return (\n    <div className={groupingClassname}>\n      <b>Group by columns:</b>\n      <div className={optionsClassname}>\n        {options.map((option) => (\n          <label key={option}>\n            <input\n              type=\"checkbox\"\n              checked={selectedOptions.includes(option)}\n              onChange={(event) => toggleOption(option, event.target.checked)}\n            />{' '}\n            {option}\n          </label>\n        ))}\n      </div>\n\n      <DataGrid\n        columns={columns}\n        rows={rows}\n        rowKeyGetter={rowKeyGetter}\n        selectedRows={selectedRows}\n        onSelectedRowsChange={setSelectedRows}\n        groupBy={selectedOptions}\n        rowGrouper={rowGrouper}\n        expandedGroupIds={expandedGroupIds}\n        onExpandedGroupIdsChange={setExpandedGroupIds}\n        defaultColumnOptions={{ resizable: true }}\n      />\n    </div>\n  );\n}\n"],"names":["sports","columns","key","name","groupFormatter","childRows","prev","gold","silver","formatter","row","rowKeyGetter","createRows","rows","i","id","year","faker","country","sport","athlete","bronze","r1","r2","options","Grouping","useState","selectedRows","setSelectedRows","selectedOptions","setSelectedOptions","expandedGroupIds","setExpandedGroupIds","Set","className","option","type","checked","onChange","event","index","newOptions","toggleOption","onSelectedRowsChange","groupBy","rowGrouper","onExpandedGroupIdsChange","defaultColumnOptions","resizable"],"sourceRoot":""}