{"version":3,"file":"20d7fac5d7eeb0e2e277.js","mappings":"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","sources":["webpack://react-data-grid/website/demos/MasterDetail.tsx","webpack://react-data-grid/website/demos/components/Formatters/CellExpanderFormatter.tsx"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport { css } from '@linaria/core';\nimport faker from 'faker';\n\nimport DataGrid from '../../src';\nimport type { Column, RowsChangeData, DataGridHandle } from '../../src';\nimport { CellExpanderFormatter } from './components/Formatters';\nimport type { Position } from '../../src/types';\n\ntype DepartmentRow =\n  | {\n      type: 'MASTER';\n      id: number;\n      department: string;\n      expanded: boolean;\n    }\n  | {\n      type: 'DETAIL';\n      id: number;\n      parentId: number;\n    };\n\ninterface ProductRow {\n  id: number;\n  product: string;\n  description: string;\n  price: string;\n}\n\nfunction createDepartments(): readonly DepartmentRow[] {\n  const departments: DepartmentRow[] = [];\n  for (let i = 1; i < 30; i++) {\n    departments.push({\n      type: 'MASTER',\n      id: i,\n      department: faker.commerce.department(),\n      expanded: false\n    });\n  }\n  return departments;\n}\n\nconst productsMap = new Map<number, readonly ProductRow[]>();\nfunction getProducts(parentId: number): readonly ProductRow[] {\n  if (productsMap.has(parentId)) return productsMap.get(parentId)!;\n  const products: ProductRow[] = [];\n  for (let i = 0; i < 20; i++) {\n    products.push({\n      id: i,\n      product: faker.commerce.productName(),\n      description: faker.commerce.productDescription(),\n      price: faker.commerce.price()\n    });\n  }\n  productsMap.set(parentId, products);\n  return products;\n}\n\nconst productColumns: readonly Column<ProductRow>[] = [\n  { key: 'id', name: 'ID', width: 35 },\n  { key: 'product', name: 'Product' },\n  { key: 'description', name: 'Description' },\n  { key: 'price', name: 'Price' }\n];\n\nconst departmentColumns: readonly Column<DepartmentRow>[] = [\n  {\n    key: 'expanded',\n    name: '',\n    minWidth: 30,\n    width: 30,\n    colSpan(args) {\n      return args.type === 'ROW' && args.row.type === 'DETAIL' ? 3 : undefined;\n    },\n    cellClass(row) {\n      return row.type === 'DETAIL'\n        ? css`\n            padding: 24px;\n          `\n        : undefined;\n    },\n    formatter({ row, isCellSelected, onRowChange }) {\n      if (row.type === 'DETAIL') {\n        return <ProductGrid isCellSelected={isCellSelected} parentId={row.parentId} />;\n      }\n\n      return (\n        <CellExpanderFormatter\n          expanded={row.expanded}\n          isCellSelected={isCellSelected}\n          onCellExpand={() => {\n            onRowChange({ ...row, expanded: !row.expanded });\n          }}\n        />\n      );\n    }\n  },\n  { key: 'id', name: 'ID', width: 35 },\n  { key: 'department', name: 'Department' }\n];\n\nexport default function MasterDetail() {\n  const [rows, setRows] = useState(createDepartments);\n\n  function onRowsChange(rows: DepartmentRow[], { indexes }: RowsChangeData<DepartmentRow>) {\n    const row = rows[indexes[0]];\n    if (row.type === 'MASTER') {\n      if (!row.expanded) {\n        rows.splice(indexes[0] + 1, 1);\n      } else {\n        rows.splice(indexes[0] + 1, 0, {\n          type: 'DETAIL',\n          id: row.id + 100,\n          parentId: row.id\n        });\n      }\n      setRows(rows);\n    }\n  }\n\n  return (\n    <DataGrid\n      rowKeyGetter={rowKeyGetter}\n      columns={departmentColumns}\n      rows={rows}\n      onRowsChange={onRowsChange}\n      headerRowHeight={45}\n      rowHeight={(args) => (args.type === 'ROW' && args.row.type === 'DETAIL' ? 300 : 45)}\n      className=\"fill-grid\"\n      enableVirtualization={false}\n    />\n  );\n}\n\nfunction ProductGrid({ parentId, isCellSelected }: { parentId: number; isCellSelected: boolean }) {\n  const gridRef = useRef<DataGridHandle>(null);\n  const [selectedPosition, setSelectedPosition] = useState<Position>({ idx: -1, rowIdx: -2 });\n  useEffect(() => {\n    if (!isCellSelected) return;\n    gridRef\n      .current!.element!.querySelector<HTMLDivElement>('[tabindex=\"0\"]')!\n      .focus({ preventScroll: true });\n  }, [isCellSelected]);\n  const products = getProducts(parentId);\n\n  function onKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    const { idx, rowIdx } = selectedPosition;\n    if (\n      event.key === 'Tab' &&\n      !event.shiftKey &&\n      rowIdx === products.length - 1 &&\n      idx === productColumns.length - 1\n    ) {\n      return;\n    }\n\n    if (event.key === 'Tab' && event.shiftKey && rowIdx === -1 && idx === 0) {\n      return;\n    }\n\n    event.stopPropagation();\n  }\n\n  return (\n    <div onKeyDown={onKeyDown}>\n      <DataGrid\n        ref={gridRef}\n        rows={products}\n        columns={productColumns}\n        rowKeyGetter={rowKeyGetter}\n        onSelectedCellChange={setSelectedPosition}\n        style={{ height: 250 }}\n      />\n    </div>\n  );\n}\n\nfunction rowKeyGetter(row: DepartmentRow | ProductRow) {\n  return row.id;\n}\n","import { css } from '@linaria/core';\nimport { useFocusRef } from '../../../../src/hooks';\n\nconst cellExpandClassname = css`\n  float: right;\n  display: table;\n  height: 100%;\n\n  > span {\n    display: table-cell;\n    vertical-align: middle;\n    cursor: pointer;\n  }\n`;\n\ninterface CellExpanderFormatterProps {\n  isCellSelected: boolean;\n  expanded: boolean;\n  onCellExpand: () => void;\n}\n\nexport function CellExpanderFormatter({\n  isCellSelected,\n  expanded,\n  onCellExpand\n}: CellExpanderFormatterProps) {\n  const { ref, tabIndex } = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown(e: React.KeyboardEvent<HTMLSpanElement>) {\n    if (e.key === ' ' || e.key === 'Enter') {\n      e.preventDefault();\n      onCellExpand();\n    }\n  }\n\n  return (\n    <div className={cellExpandClassname}>\n      <span onClick={onCellExpand} onKeyDown={handleKeyDown}>\n        <span ref={ref} tabIndex={tabIndex}>\n          {expanded ? '\\u25BC' : '\\u25B6'}\n        </span>\n      </span>\n    </div>\n  );\n}\n"],"names":["createDepartments","departments","i","type","id","department","faker","expanded","productsMap","productColumns","key","name","width","departmentColumns","minWidth","colSpan","args","cellClass","row","formatter","onRowChange","isCellSelected","parentId","onCellExpand","MasterDetail","rows","setRows","useState","rowKeyGetter","columns","onRowsChange","indexes","headerRowHeight","rowHeight","className","enableVirtualization","ProductGrid","gridRef","useRef","selectedPosition","setSelectedPosition","idx","rowIdx","useEffect","preventScroll","products","product","description","price","getProducts","onKeyDown","event","ref","onSelectedCellChange","style","height","CellExpanderFormatter","tabIndex","useFocusRef","onClick","e"],"sourceRoot":""}