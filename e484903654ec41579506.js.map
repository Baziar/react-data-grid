{"version":3,"file":"e484903654ec41579506.js","mappings":"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","sources":["webpack://react-data-grid/./website/demos/components/HeaderRenderers/DraggableHeaderRenderer.tsx","webpack://react-data-grid/./website/demos/ColumnsReordering.tsx"],"sourcesContent":["import { useDrag, useDrop } from 'react-dnd';\n\nimport { SortableHeaderCell } from '../../../../src';\nimport type { HeaderRendererProps } from '../../../../src';\nimport { useCombinedRefs } from '../../../../src/hooks';\n\ninterface DraggableHeaderRendererProps<R> extends HeaderRendererProps<R> {\n  onColumnsReorder: (sourceKey: string, targetKey: string) => void;\n}\n\nexport function DraggableHeaderRenderer<R>({\n  onColumnsReorder,\n  column,\n  sortDirection,\n  onSort,\n  priority,\n  isCellSelected\n}: DraggableHeaderRendererProps<R>) {\n  const [{ isDragging }, drag] = useDrag({\n    type: 'COLUMN_DRAG',\n    item: { key: column.key },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n\n  const [{ isOver }, drop] = useDrop({\n    accept: 'COLUMN_DRAG',\n    drop({ key }: { key: string }) {\n      onColumnsReorder(key, column.key);\n    },\n    collect: (monitor) => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop()\n    })\n  });\n\n  return (\n    <div\n      ref={useCombinedRefs(drag, drop)}\n      style={{\n        opacity: isDragging ? 0.5 : 1,\n        backgroundColor: isOver ? '#ececec' : undefined,\n        cursor: 'move'\n      }}\n    >\n      <SortableHeaderCell\n        sortDirection={sortDirection}\n        onSort={onSort}\n        priority={priority}\n        isCellSelected={isCellSelected}\n      >\n        {column.name}\n      </SortableHeaderCell>\n    </div>\n  );\n}\n","import { useState, useMemo, useCallback } from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\nimport { DraggableHeaderRenderer } from './components/HeaderRenderers';\nimport DataGrid from '../../src';\nimport type { Column, HeaderRendererProps, SortColumn } from '../../src';\n\ninterface Row {\n  id: number;\n  task: string;\n  complete: number;\n  priority: string;\n  issueType: string;\n}\n\nfunction createRows(): Row[] {\n  const rows = [];\n  for (let i = 1; i < 500; i++) {\n    rows.push({\n      id: i,\n      task: `Task ${i}`,\n      complete: Math.min(100, Math.round(Math.random() * 110)),\n      priority: ['Critical', 'High', 'Medium', 'Low'][Math.round(Math.random() * 3)],\n      issueType: ['Bug', 'Improvement', 'Epic', 'Story'][Math.round(Math.random() * 3)]\n    });\n  }\n\n  return rows;\n}\n\nfunction createColumns(): Column<Row>[] {\n  return [\n    {\n      key: 'id',\n      name: 'ID',\n      width: 80\n    },\n    {\n      key: 'task',\n      name: 'Title',\n      resizable: true,\n      sortable: true\n    },\n    {\n      key: 'priority',\n      name: 'Priority',\n      resizable: true,\n      sortable: true\n    },\n    {\n      key: 'issueType',\n      name: 'Issue Type',\n      resizable: true,\n      sortable: true\n    },\n    {\n      key: 'complete',\n      name: '% Complete',\n      resizable: true,\n      sortable: true\n    }\n  ];\n}\n\nexport default function ColumnsReordering() {\n  const [rows] = useState(createRows);\n  const [columns, setColumns] = useState(createColumns);\n  const [sortColumns, setSortColumns] = useState<readonly SortColumn[]>([]);\n  const onSortColumnsChange = useCallback((sortColumns: SortColumn[]) => {\n    setSortColumns(sortColumns.slice(-1));\n  }, []);\n\n  const draggableColumns = useMemo(() => {\n    function HeaderRenderer(props: HeaderRendererProps<Row>) {\n      return <DraggableHeaderRenderer {...props} onColumnsReorder={handleColumnsReorder} />;\n    }\n\n    function handleColumnsReorder(sourceKey: string, targetKey: string) {\n      const sourceColumnIndex = columns.findIndex((c) => c.key === sourceKey);\n      const targetColumnIndex = columns.findIndex((c) => c.key === targetKey);\n      const reorderedColumns = [...columns];\n\n      reorderedColumns.splice(\n        targetColumnIndex,\n        0,\n        reorderedColumns.splice(sourceColumnIndex, 1)[0]\n      );\n\n      setColumns(reorderedColumns);\n    }\n\n    return columns.map((c) => {\n      if (c.key === 'id') return c;\n      return { ...c, headerRenderer: HeaderRenderer };\n    });\n  }, [columns]);\n\n  const sortedRows = useMemo((): readonly Row[] => {\n    if (sortColumns.length === 0) return rows;\n    const { columnKey, direction } = sortColumns[0];\n\n    let sortedRows: Row[] = [...rows];\n\n    switch (columnKey) {\n      case 'task':\n      case 'priority':\n      case 'issueType':\n        sortedRows = sortedRows.sort((a, b) => a[columnKey].localeCompare(b[columnKey]));\n        break;\n      case 'complete':\n        sortedRows = sortedRows.sort((a, b) => a[columnKey] - b[columnKey]);\n        break;\n      default:\n    }\n    return direction === 'DESC' ? sortedRows.reverse() : sortedRows;\n  }, [rows, sortColumns]);\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <DataGrid\n        columns={draggableColumns}\n        rows={sortedRows}\n        sortColumns={sortColumns}\n        onSortColumnsChange={onSortColumnsChange}\n      />\n    </DndProvider>\n  );\n}\n"],"names":["DraggableHeaderRenderer","onColumnsReorder","column","sortDirection","onSort","priority","isCellSelected","isDragging","drag","useDrag","type","item","key","collect","monitor","isOver","drop","useDrop","accept","canDrop","ref","useCombinedRefs","style","opacity","backgroundColor","undefined","cursor","SortableHeaderCell","name","createRows","rows","i","push","id","task","complete","Math","min","round","random","issueType","createColumns","width","resizable","sortable","ColumnsReordering","useState","columns","setColumns","sortColumns","setSortColumns","onSortColumnsChange","useCallback","slice","draggableColumns","useMemo","HeaderRenderer","props","handleColumnsReorder","sourceKey","targetKey","sourceColumnIndex","findIndex","c","targetColumnIndex","reorderedColumns","splice","map","headerRenderer","sortedRows","length","columnKey","direction","sort","a","b","localeCompare","reverse","DndProvider","backend","HTML5Backend","DataGrid"],"sourceRoot":""}