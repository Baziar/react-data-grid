{"version":3,"file":"4d42b06a14f89b23a6d8.js","mappings":"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","sources":["webpack://react-data-grid/src/editors/TextEditor.tsx","webpack://react-data-grid/./website/demos/exportUtils.tsx","webpack://react-data-grid/website/demos/CommonFeatures.tsx"],"sourcesContent":["import { css } from '@linaria/core';\nimport type { EditorProps } from '../types';\n\nconst textEditor = css`\n  appearance: none;\n\n  box-sizing: border-box;\n  width: 100%;\n  height: 100%;\n  padding: 0px 6px 0 6px;\n  border: 2px solid #ccc;\n  vertical-align: top;\n  color: var(--color);\n  background-color: var(--background-color);\n\n  font-family: inherit;\n  font-size: var(--font-size);\n\n  &:focus {\n    border-color: var(--selection-color);\n    outline: none;\n  }\n\n  &::placeholder {\n    color: #999;\n    opacity: 1;\n  }\n`;\n\nexport const textEditorClassname = `rdg-text-editor ${textEditor}`;\n\nfunction autoFocusAndSelect(input: HTMLInputElement | null) {\n  input?.focus();\n  input?.select();\n}\n\nexport default function TextEditor<TRow, TSummaryRow>({\n  row,\n  column,\n  onRowChange,\n  onClose\n}: EditorProps<TRow, TSummaryRow>) {\n  return (\n    <input\n      className={textEditorClassname}\n      ref={autoFocusAndSelect}\n      value={row[column.key as keyof TRow] as unknown as string}\n      onChange={(event) => onRowChange({ ...row, [column.key]: event.target.value })}\n      onBlur={() => onClose(true)}\n    />\n  );\n}\n","import { cloneElement } from 'react';\nimport type { ReactElement } from 'react';\n\nimport type { DataGridProps } from '../../src';\n\nexport async function exportToCsv<R, SR>(\n  gridElement: ReactElement<DataGridProps<R, SR>>,\n  fileName: string\n) {\n  const { head, body, foot } = await getGridContent(gridElement);\n  const content = [...head, ...body, ...foot]\n    .map((cells) => cells.map(serialiseCellValue).join(','))\n    .join('\\n');\n\n  downloadFile(fileName, new Blob([content], { type: 'text/csv;charset=utf-8;' }));\n}\n\nexport async function exportToXlsx<R, SR>(\n  gridElement: ReactElement<DataGridProps<R, SR>>,\n  fileName: string\n) {\n  const [{ utils, writeFile }, { head, body, foot }] = await Promise.all([\n    import('xlsx'),\n    getGridContent(gridElement)\n  ]);\n  const wb = utils.book_new();\n  const ws = utils.aoa_to_sheet([...head, ...body, ...foot]);\n  utils.book_append_sheet(wb, ws, 'Sheet 1');\n  writeFile(wb, fileName);\n}\n\nexport async function exportToPdf<R, SR>(\n  gridElement: ReactElement<DataGridProps<R, SR>>,\n  fileName: string\n) {\n  const [{ jsPDF }, autoTable, { head, body, foot }] = await Promise.all([\n    import('jspdf'),\n    (await import('jspdf-autotable')).default,\n    await getGridContent(gridElement)\n  ]);\n  const doc = new jsPDF({\n    orientation: 'l',\n    unit: 'px'\n  });\n\n  autoTable(doc, {\n    head,\n    body,\n    foot,\n    horizontalPageBreak: true,\n    styles: { cellPadding: 1.5, fontSize: 8, cellWidth: 'wrap' },\n    tableWidth: 'wrap'\n  });\n  doc.save(fileName);\n}\n\nasync function getGridContent<R, SR>(gridElement: ReactElement<DataGridProps<R, SR>>) {\n  const { renderToStaticMarkup } = await import('react-dom/server');\n  const grid = document.createElement('div');\n  grid.innerHTML = renderToStaticMarkup(\n    cloneElement(gridElement, {\n      enableVirtualization: false\n    })\n  );\n\n  return {\n    head: getRows('.rdg-header-row'),\n    body: getRows('.rdg-row:not(.rdg-summary-row)'),\n    foot: getRows('.rdg-summary-row')\n  };\n\n  function getRows(selector: string) {\n    return Array.from(grid.querySelectorAll<HTMLDivElement>(selector)).map((gridRow) => {\n      return Array.from(gridRow.querySelectorAll<HTMLDivElement>('.rdg-cell')).map(\n        (gridCell) => gridCell.innerText\n      );\n    });\n  }\n}\n\nfunction serialiseCellValue(value: unknown) {\n  if (typeof value === 'string') {\n    const formattedValue = value.replace(/\"/g, '\"\"');\n    return formattedValue.includes(',') ? `\"${formattedValue}\"` : formattedValue;\n  }\n  return value;\n}\n\nfunction downloadFile(fileName: string, data: Blob) {\n  const downloadLink = document.createElement('a');\n  downloadLink.download = fileName;\n  const url = URL.createObjectURL(data);\n  downloadLink.href = url;\n  downloadLink.click();\n  URL.revokeObjectURL(url);\n}\n","import { useState, useMemo } from 'react';\nimport { css } from '@linaria/core';\nimport faker from 'faker';\n\nimport DataGrid, { SelectColumn, TextEditor, SelectCellFormatter } from '../../src';\nimport type { Column, SortColumn } from '../../src';\nimport { stopPropagation } from '../../src/utils';\nimport { exportToCsv, exportToXlsx, exportToPdf } from './exportUtils';\nimport { textEditorClassname } from '../../src/editors/TextEditor';\n\nconst toolbarClassname = css`\n  text-align: right;\n  margin-bottom: 8px;\n`;\n\nconst dialogContainerClassname = css`\n  position: absolute;\n  inset: 0;\n  display: flex;\n  place-items: center;\n  background: rgba(0, 0, 0, 0.1);\n\n  > dialog {\n    width: 300px;\n    > input {\n      width: 100%;\n    }\n\n    > menu {\n      text-align: right;\n    }\n  }\n`;\n\nconst dateFormatter = new Intl.DateTimeFormat(navigator.language);\nconst currencyFormatter = new Intl.NumberFormat(navigator.language, {\n  style: 'currency',\n  currency: 'eur'\n});\n\nfunction TimestampFormatter({ timestamp }: { timestamp: number }) {\n  return <>{dateFormatter.format(timestamp)}</>;\n}\n\nfunction CurrencyFormatter({ value }: { value: number }) {\n  return <>{currencyFormatter.format(value)}</>;\n}\n\ninterface SummaryRow {\n  id: string;\n  totalCount: number;\n  yesCount: number;\n}\n\ninterface Row {\n  id: number;\n  title: string;\n  client: string;\n  area: string;\n  country: string;\n  contact: string;\n  assignee: string;\n  progress: number;\n  startTimestamp: number;\n  endTimestamp: number;\n  budget: number;\n  transaction: string;\n  account: string;\n  version: string;\n  available: boolean;\n}\n\nfunction getColumns(countries: string[]): readonly Column<Row, SummaryRow>[] {\n  return [\n    SelectColumn,\n    {\n      key: 'id',\n      name: 'ID',\n      width: 60,\n      frozen: true,\n      resizable: false,\n      summaryFormatter() {\n        return <strong>Total</strong>;\n      }\n    },\n    {\n      key: 'title',\n      name: 'Task',\n      width: 120,\n      frozen: true,\n      editor: TextEditor,\n      summaryFormatter({ row }) {\n        return <>{row.totalCount} records</>;\n      }\n    },\n    {\n      key: 'client',\n      name: 'Client',\n      width: 220,\n      editor: TextEditor\n    },\n    {\n      key: 'area',\n      name: 'Area',\n      width: 120,\n      editor: TextEditor\n    },\n    {\n      key: 'country',\n      name: 'Country',\n      width: 180,\n      editor: (p) => (\n        <select\n          autoFocus\n          className={textEditorClassname}\n          value={p.row.country}\n          onChange={(e) => p.onRowChange({ ...p.row, country: e.target.value }, true)}\n        >\n          {countries.map((country) => (\n            <option key={country}>{country}</option>\n          ))}\n        </select>\n      ),\n      editorOptions: {\n        editOnClick: true\n      }\n    },\n    {\n      key: 'contact',\n      name: 'Contact',\n      width: 160,\n      editor: TextEditor\n    },\n    {\n      key: 'assignee',\n      name: 'Assignee',\n      width: 150,\n      editor: TextEditor\n    },\n    {\n      key: 'progress',\n      name: 'Completion',\n      width: 110,\n      formatter(props) {\n        const value = props.row.progress;\n        return (\n          <>\n            <progress max={100} value={value} style={{ width: 50 }} /> {Math.round(value)}%\n          </>\n        );\n      },\n      editor({ row, onRowChange, onClose }) {\n        return (\n          <div className={dialogContainerClassname}>\n            <dialog open>\n              <input\n                autoFocus\n                type=\"range\"\n                min=\"0\"\n                max=\"100\"\n                value={row.progress}\n                onChange={(e) => onRowChange({ ...row, progress: e.target.valueAsNumber })}\n              />\n              <menu>\n                <button onClick={() => onClose()}>Cancel</button>\n                <button onClick={() => onClose(true)}>Save</button>\n              </menu>\n            </dialog>\n          </div>\n        );\n      },\n      editorOptions: {\n        createPortal: true\n      }\n    },\n    {\n      key: 'startTimestamp',\n      name: 'Start date',\n      width: 100,\n      formatter(props) {\n        return <TimestampFormatter timestamp={props.row.startTimestamp} />;\n      }\n    },\n    {\n      key: 'endTimestamp',\n      name: 'Deadline',\n      width: 100,\n      formatter(props) {\n        return <TimestampFormatter timestamp={props.row.endTimestamp} />;\n      }\n    },\n    {\n      key: 'budget',\n      name: 'Budget',\n      width: 100,\n      formatter(props) {\n        return <CurrencyFormatter value={props.row.budget} />;\n      }\n    },\n    {\n      key: 'transaction',\n      name: 'Transaction type'\n    },\n    {\n      key: 'account',\n      name: 'Account',\n      width: 150\n    },\n    {\n      key: 'version',\n      name: 'Version',\n      editor: TextEditor\n    },\n    {\n      key: 'available',\n      name: 'Available',\n      width: 80,\n      formatter({ row, onRowChange, isCellSelected }) {\n        return (\n          <SelectCellFormatter\n            value={row.available}\n            onChange={() => {\n              onRowChange({ ...row, available: !row.available });\n            }}\n            onClick={stopPropagation}\n            isCellSelected={isCellSelected}\n          />\n        );\n      },\n      summaryFormatter({ row: { yesCount, totalCount } }) {\n        return <>{`${Math.floor((100 * yesCount) / totalCount)}% ✔️`}</>;\n      }\n    }\n  ];\n}\n\nfunction rowKeyGetter(row: Row) {\n  return row.id;\n}\n\nfunction createRows(): readonly Row[] {\n  const now = Date.now();\n  const rows: Row[] = [];\n\n  for (let i = 0; i < 1000; i++) {\n    rows.push({\n      id: i,\n      title: `Task #${i + 1}`,\n      client: faker.company.companyName(),\n      area: faker.name.jobArea(),\n      country: faker.address.country(),\n      contact: faker.internet.exampleEmail(),\n      assignee: faker.name.findName(),\n      progress: Math.random() * 100,\n      startTimestamp: now - Math.round(Math.random() * 1e10),\n      endTimestamp: now + Math.round(Math.random() * 1e10),\n      budget: 500 + Math.random() * 10500,\n      transaction: faker.finance.transactionType(),\n      account: faker.finance.iban(),\n      version: faker.system.semver(),\n      available: Math.random() > 0.5\n    });\n  }\n\n  return rows;\n}\n\ntype Comparator = (a: Row, b: Row) => number;\nfunction getComparator(sortColumn: string): Comparator {\n  switch (sortColumn) {\n    case 'assignee':\n    case 'title':\n    case 'client':\n    case 'area':\n    case 'country':\n    case 'contact':\n    case 'transaction':\n    case 'account':\n    case 'version':\n      return (a, b) => {\n        return a[sortColumn].localeCompare(b[sortColumn]);\n      };\n    case 'available':\n      return (a, b) => {\n        return a[sortColumn] === b[sortColumn] ? 0 : a[sortColumn] ? 1 : -1;\n      };\n    case 'id':\n    case 'progress':\n    case 'startTimestamp':\n    case 'endTimestamp':\n    case 'budget':\n      return (a, b) => {\n        return a[sortColumn] - b[sortColumn];\n      };\n    default:\n      throw new Error(`unsupported sortColumn: \"${sortColumn}\"`);\n  }\n}\n\nexport default function CommonFeatures() {\n  const [rows, setRows] = useState(createRows);\n  const [sortColumns, setSortColumns] = useState<readonly SortColumn[]>([]);\n  const [selectedRows, setSelectedRows] = useState<ReadonlySet<number>>(() => new Set());\n\n  const countries = useMemo(() => {\n    return [...new Set(rows.map((r) => r.country))].sort(new Intl.Collator().compare);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const columns = useMemo(() => getColumns(countries), [countries]);\n\n  const summaryRows = useMemo(() => {\n    const summaryRow: SummaryRow = {\n      id: 'total_0',\n      totalCount: rows.length,\n      yesCount: rows.filter((r) => r.available).length\n    };\n    return [summaryRow];\n  }, [rows]);\n\n  const sortedRows = useMemo((): readonly Row[] => {\n    if (sortColumns.length === 0) return rows;\n\n    const sortedRows = [...rows];\n    sortedRows.sort((a, b) => {\n      for (const sort of sortColumns) {\n        const comparator = getComparator(sort.columnKey);\n        const compResult = comparator(a, b);\n        if (compResult !== 0) {\n          return sort.direction === 'ASC' ? compResult : -compResult;\n        }\n      }\n      return 0;\n    });\n    return sortedRows;\n  }, [rows, sortColumns]);\n\n  const gridElement = (\n    <DataGrid\n      rowKeyGetter={rowKeyGetter}\n      columns={columns}\n      rows={sortedRows}\n      defaultColumnOptions={{\n        sortable: true,\n        resizable: true\n      }}\n      selectedRows={selectedRows}\n      onSelectedRowsChange={setSelectedRows}\n      onRowsChange={setRows}\n      sortColumns={sortColumns}\n      onSortColumnsChange={setSortColumns}\n      summaryRows={summaryRows}\n      className=\"fill-grid\"\n    />\n  );\n\n  return (\n    <>\n      <div className={toolbarClassname}>\n        <ExportButton onExport={() => exportToCsv(gridElement, 'CommonFeatures.csv')}>\n          Export to CSV\n        </ExportButton>\n        <ExportButton onExport={() => exportToXlsx(gridElement, 'CommonFeatures.xlsx')}>\n          Export to XSLX\n        </ExportButton>\n        <ExportButton onExport={() => exportToPdf(gridElement, 'CommonFeatures.pdf')}>\n          Export to PDF\n        </ExportButton>\n      </div>\n      {gridElement}\n    </>\n  );\n}\n\nfunction ExportButton({\n  onExport,\n  children\n}: {\n  onExport: () => Promise<unknown>;\n  children: React.ReactChild;\n}) {\n  const [exporting, setExporting] = useState(false);\n  return (\n    <button\n      disabled={exporting}\n      onClick={async () => {\n        setExporting(true);\n        await onExport();\n        setExporting(false);\n      }}\n    >\n      {exporting ? 'Exporting' : children}\n    </button>\n  );\n}\n"],"names":["textEditorClassname","autoFocusAndSelect","input","TextEditor","onClose","className","ref","value","row","column","onChange","event","onRowChange","onBlur","async","getGridContent","gridElement","renderToStaticMarkup","grid","document","createElement","innerHTML","cloneElement","enableVirtualization","head","getRows","body","foot","selector","Array","from","querySelectorAll","map","gridRow","gridCell","innerText","serialiseCellValue","formattedValue","replace","includes","dateFormatter","Intl","navigator","currencyFormatter","style","currency","TimestampFormatter","timestamp","CurrencyFormatter","rowKeyGetter","createRows","now","Date","rows","i","id","title","client","faker","area","country","contact","assignee","progress","Math","startTimestamp","endTimestamp","budget","transaction","account","version","available","getComparator","sortColumn","a","b","Error","CommonFeatures","setRows","useState","sortColumns","setSortColumns","selectedRows","setSelectedRows","countries","useMemo","Set","r","columns","key","name","width","frozen","resizable","summaryFormatter","editor","p","autoFocus","e","editorOptions","editOnClick","formatter","props","max","open","type","min","valueAsNumber","onClick","createPortal","isCellSelected","totalCount","getColumns","summaryRows","yesCount","length","sortedRows","compResult","sort","comparator","defaultColumnOptions","sortable","onSelectedRowsChange","onRowsChange","onSortColumnsChange","onExport","fileName","content","cells","join","data","downloadLink","download","url","URL","createObjectURL","href","click","revokeObjectURL","downloadFile","Blob","exportToCsv","utils","writeFile","Promise","all","wb","book_new","ws","aoa_to_sheet","book_append_sheet","exportToXlsx","jsPDF","autoTable","default","doc","orientation","unit","horizontalPageBreak","styles","cellPadding","fontSize","cellWidth","tableWidth","save","exportToPdf","ExportButton","children","exporting","setExporting","disabled"],"sourceRoot":""}