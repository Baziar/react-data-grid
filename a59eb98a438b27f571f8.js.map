{"version":3,"file":"a59eb98a438b27f571f8.js","mappings":"qKAGA,MA0BaA,EAAuB,2BAEpC,SAASC,EAAmBC,GACrB,MAALA,GAAAA,EAAAA,QACK,MAALA,GAAAA,EAAAA,SAGa,SAASC,GAA8B,qCAIpDC,IAEA,OACE,kBACEC,UADF,EAEEC,IAFF,EAGEC,MAAOC,EAAIC,EAHb,KAIEC,SAAWC,GAAUC,EAAY,MAAU,CAACH,EAAD,KAAcE,EAAAA,OAAaJ,QACtEM,OAAQ,IAAMT,GANlB,K,8JCtBK,SAASU,GAA4B,uDAKvCC,IAEH,OAAO,WAAEC,GAAH,IAAyBC,EAAAA,EAAAA,GAAQ,CACrCC,KADqC,WAErCC,KAAM,CAAEC,MAAOC,GACfC,QAAUC,IAAD,CACPP,WAAYO,EAAAA,mBAIT,OAAEC,GAAH,IAAqBC,EAAAA,EAAAA,GAAQ,CACjCC,OADiC,WAEjCC,MAAK,MAAEP,IACLQ,EAAaR,EAAbQ,IAEFN,QAAUC,IAAD,CACPC,OAAQD,EADa,SAErBM,QAASN,EAAAA,cASb,OALAlB,GAAYyB,EAAAA,EAAAA,GAAKzB,EAAW,GAtC9B,UAwCwBmB,GApCxB,WAwCI,cACElB,KAAKyB,EAAAA,EAAAA,GAAgBC,EADvB,GAEEX,OAFF,EAGEY,cAHF,EAIE5B,UAJF,KADF,I,mCCnCF,SAAS6B,IACP,MAAMC,EAAO,GACb,IAAK,IAAIC,EAAI,EAAGA,EAAI,IAAKA,IACvBD,EAAKE,KAAK,CACRC,GAAIF,EACJG,KAAO,QAAOH,IACdI,SAAUC,KAAKC,IAAI,IAAKD,KAAKE,MAAsB,IAAhBF,KAAKG,WACxCC,SAAU,CAAC,WAAY,OAAQ,SAAU,OAAOJ,KAAKE,MAAsB,EAAhBF,KAAKG,WAChEE,UAAW,CAAC,MAAO,cAAe,OAAQ,SAASL,KAAKE,MAAsB,EAAhBF,KAAKG,aAIvE,OAAOT,EAGT,MAAMY,EAAkC,CACtC,CACEC,IAAK,KACLC,KAAM,KACNC,MAAO,IAET,CACEF,IAAK,OACLC,KAAM,QACNE,OAAQhD,EAAAA,GAEV,CACE6C,IAAK,WACLC,KAAM,YAER,CACED,IAAK,YACLC,KAAM,cAER,CACED,IAAK,WACLC,KAAM,eAIK,SAASG,IACtB,MAAOjB,EAAMkB,IAAWC,EAAAA,EAAAA,UAASpB,GAE3BqB,GAAcC,EAAAA,EAAAA,cAAazC,IASxB,SAACD,EAAD,IAA0BC,EAAOa,aARxC,SAAsB6B,EAAmBC,GACvCL,GAASlB,IACP,MAAMwB,EAAU,IAAIxB,GAEpB,OADAwB,EAAQC,OAAOF,EAAS,EAAGC,EAAQC,OAAOH,EAAW,GAAG,IACjDE,SAKV,IAEH,OACE,SAACE,EAAA,EAAD,CAAaC,QAASC,EAAAA,GAAtB,UACE,SAACC,EAAA,EAAD,CAAUjB,QAASA,EAASZ,KAAMA,EAAM8B,aAAcZ,EAASa,YAAaX,Q","sources":["webpack://react-data-grid/src/editors/TextEditor.tsx","webpack://react-data-grid/website/demos/components/RowRenderers/DraggableRowRenderer.tsx","webpack://react-data-grid/./website/demos/RowsReordering.tsx"],"sourcesContent":["import { css } from '@linaria/core';\nimport type { EditorProps } from '../types';\n\nconst textEditor = css`\n  appearance: none;\n\n  box-sizing: border-box;\n  width: 100%;\n  height: 100%;\n  padding: 0px 6px 0 6px;\n  border: 2px solid #ccc;\n  vertical-align: top;\n  color: var(--color);\n  background-color: var(--background-color);\n\n  font-family: inherit;\n  font-size: var(--font-size);\n\n  &:focus {\n    border-color: var(--selection-color);\n    outline: none;\n  }\n\n  &::placeholder {\n    color: #999;\n    opacity: 1;\n  }\n`;\n\nexport const textEditorClassname = `rdg-text-editor ${textEditor}`;\n\nfunction autoFocusAndSelect(input: HTMLInputElement | null) {\n  input?.focus();\n  input?.select();\n}\n\nexport default function TextEditor<TRow, TSummaryRow>({\n  row,\n  column,\n  onRowChange,\n  onClose\n}: EditorProps<TRow, TSummaryRow>) {\n  return (\n    <input\n      className={textEditorClassname}\n      ref={autoFocusAndSelect}\n      value={row[column.key as keyof TRow] as unknown as string}\n      onChange={(event) => onRowChange({ ...row, [column.key]: event.target.value })}\n      onBlur={() => onClose(true)}\n    />\n  );\n}\n","import { useDrag, useDrop } from 'react-dnd';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport { Row } from '../../../../src';\nimport type { RowRendererProps } from '../../../../src';\nimport { useCombinedRefs } from '../../../../src/hooks';\n\nconst rowDraggingClassname = css`\n  opacity: 0.5;\n`;\n\nconst rowOverClassname = css`\n  background-color: #ececec;\n`;\n\ninterface DraggableRowRenderProps<R, SR> extends RowRendererProps<R, SR> {\n  onRowReorder: (sourceIndex: number, targetIndex: number) => void;\n}\n\nexport function DraggableRowRenderer<R, SR>({\n  rowIdx,\n  isRowSelected,\n  className,\n  onRowReorder,\n  ...props\n}: DraggableRowRenderProps<R, SR>) {\n  const [{ isDragging }, drag] = useDrag({\n    type: 'ROW_DRAG',\n    item: { index: rowIdx },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n\n  const [{ isOver }, drop] = useDrop({\n    accept: 'ROW_DRAG',\n    drop({ index }: { index: number }) {\n      onRowReorder(index, rowIdx);\n    },\n    collect: (monitor) => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop()\n    })\n  });\n\n  className = clsx(className, {\n    [rowDraggingClassname]: isDragging,\n    [rowOverClassname]: isOver\n  });\n\n  return (\n    <Row\n      ref={useCombinedRefs(drag, drop)}\n      rowIdx={rowIdx}\n      isRowSelected={isRowSelected}\n      className={className}\n      {...props}\n    />\n  );\n}\n","import { useCallback, useState } from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\nimport { DraggableRowRenderer } from './components/RowRenderers';\nimport DataGrid, { TextEditor } from '../../src';\nimport type { Column, RowRendererProps } from '../../src';\n\ninterface Row {\n  id: number;\n  task: string;\n  complete: number;\n  priority: string;\n  issueType: string;\n}\n\nfunction createRows(): readonly Row[] {\n  const rows = [];\n  for (let i = 1; i < 500; i++) {\n    rows.push({\n      id: i,\n      task: `Task ${i}`,\n      complete: Math.min(100, Math.round(Math.random() * 110)),\n      priority: ['Critical', 'High', 'Medium', 'Low'][Math.round(Math.random() * 3)],\n      issueType: ['Bug', 'Improvement', 'Epic', 'Story'][Math.round(Math.random() * 3)]\n    });\n  }\n\n  return rows;\n}\n\nconst columns: readonly Column<Row>[] = [\n  {\n    key: 'id',\n    name: 'ID',\n    width: 80\n  },\n  {\n    key: 'task',\n    name: 'Title',\n    editor: TextEditor\n  },\n  {\n    key: 'priority',\n    name: 'Priority'\n  },\n  {\n    key: 'issueType',\n    name: 'Issue Type'\n  },\n  {\n    key: 'complete',\n    name: '% Complete'\n  }\n];\n\nexport default function RowsReordering() {\n  const [rows, setRows] = useState(createRows);\n\n  const RowRenderer = useCallback((props: RowRendererProps<Row>) => {\n    function onRowReorder(fromIndex: number, toIndex: number) {\n      setRows((rows) => {\n        const newRows = [...rows];\n        newRows.splice(toIndex, 0, newRows.splice(fromIndex, 1)[0]);\n        return newRows;\n      });\n    }\n\n    return <DraggableRowRenderer {...props} onRowReorder={onRowReorder} />;\n  }, []);\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <DataGrid columns={columns} rows={rows} onRowsChange={setRows} rowRenderer={RowRenderer} />\n    </DndProvider>\n  );\n}\n"],"names":["textEditorClassname","autoFocusAndSelect","input","TextEditor","onClose","className","ref","value","row","column","onChange","event","onRowChange","onBlur","DraggableRowRenderer","props","isDragging","useDrag","type","item","index","rowIdx","collect","monitor","isOver","useDrop","accept","drop","onRowReorder","canDrop","clsx","useCombinedRefs","drag","isRowSelected","createRows","rows","i","push","id","task","complete","Math","min","round","random","priority","issueType","columns","key","name","width","editor","RowsReordering","setRows","useState","RowRenderer","useCallback","fromIndex","toIndex","newRows","splice","DndProvider","backend","HTML5Backend","DataGrid","onRowsChange","rowRenderer"],"sourceRoot":""}