{"version":3,"file":"760b13d64fa5b9a48011.js","mappings":"sLAIA,MAAMA,EAAuB,IAAIC,MAAM,KAAKC,QAE5C,SAASC,EAAcC,GACrB,OACE,gCACGA,EAAMC,OAAOC,IADhB,IAC4BF,EAAMG,OAKtC,MAAMC,EAAyB,GAE/B,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,MAAMH,EAAMI,OAAOD,GACnBD,EAAQG,KAAK,CACXL,IAAAA,EACAM,KAAMN,EACNO,UAAWV,IAIA,SAASW,IACtB,OACE,SAAC,IAAD,CAAUN,QAASA,EAASR,KAAMA,EAAMe,UAAU,YAAYC,MAAO,CAAEC,OAAQ,Y,gBC3BnF,SAASC,EAAMC,GACd,IAAIC,EAAGC,EAAGC,EAAI,GAEd,GAAmB,iBAARH,GAAmC,iBAARA,EACrCG,GAAOH,OACD,GAAmB,iBAARA,EACjB,GAAIlB,MAAMsB,QAAQJ,GACjB,IAAKC,EAAE,EAAGA,EAAID,EAAIK,OAAQJ,IACrBD,EAAIC,KACHC,EAAIH,EAAMC,EAAIC,OACjBE,IAAQA,GAAO,KACfA,GAAOD,QAKV,IAAKD,KAAKD,EACLA,EAAIC,KACPE,IAAQA,GAAO,KACfA,GAAOF,GAMX,OAAOE,EAGO,SAAS,IAEvB,IADA,IAASG,EAAKC,EAAVjB,EAAE,EAAWa,EAAI,GACdb,EAAIkB,UAAUH,SAChBC,EAAME,UAAUlB,QACfiB,EAAIR,EAAMO,MACbH,IAAQA,GAAO,KACfA,GAAOI,GAIV,OAAOJ,E","sources":["webpack://react-data-grid/./website/demos/Resizable.tsx","webpack://react-data-grid/./node_modules/clsx/dist/clsx.m.js"],"sourcesContent":["import DataGrid from '../../src';\nimport type { Column, FormatterProps } from '../../src';\n\ntype Row = number;\nconst rows: readonly Row[] = [...Array(100).keys()];\n\nfunction CellFormatter(props: FormatterProps<Row>) {\n  return (\n    <>\n      {props.column.key}&times;{props.row}\n    </>\n  );\n}\n\nconst columns: Column<Row>[] = [];\n\nfor (let i = 0; i < 50; i++) {\n  const key = String(i);\n  columns.push({\n    key,\n    name: key,\n    formatter: CellFormatter\n  });\n}\n\nexport default function ResizableGrid() {\n  return (\n    <DataGrid columns={columns} rows={rows} className=\"fill-grid\" style={{ resize: 'both' }} />\n  );\n}\n","function toVal(mix) {\n\tvar k, y, str='';\n\n\tif (typeof mix === 'string' || typeof mix === 'number') {\n\t\tstr += mix;\n\t} else if (typeof mix === 'object') {\n\t\tif (Array.isArray(mix)) {\n\t\t\tfor (k=0; k < mix.length; k++) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tif (y = toVal(mix[k])) {\n\t\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\t\tstr += y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (k in mix) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\tstr += k;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn str;\n}\n\nexport default function () {\n\tvar i=0, tmp, x, str='';\n\twhile (i < arguments.length) {\n\t\tif (tmp = arguments[i++]) {\n\t\t\tif (x = toVal(tmp)) {\n\t\t\t\tstr && (str += ' ');\n\t\t\t\tstr += x\n\t\t\t}\n\t\t}\n\t}\n\treturn str;\n}\n"],"names":["rows","Array","keys","CellFormatter","props","column","key","row","columns","i","String","push","name","formatter","ResizableGrid","className","style","resize","toVal","mix","k","y","str","isArray","length","tmp","x","arguments"],"sourceRoot":""}