{"version":3,"file":"71e808997ec04f008a8e.js","mappings":"qNAyBA,SAASA,EAAaC,GACpB,OAAOA,EAAP,GAGF,MAAMC,EAAkC,CACtC,CACEC,IADF,KAEEC,KAAM,MAER,CACED,IADF,QAEEC,KAAM,SAER,CACED,IADF,YAEEC,KAAM,cAER,CACED,IADF,WAEEC,KAAM,aAER,CACED,IADF,QAEEC,KAAM,UAIV,SAASC,EAAwBC,GAC/B,MAAO,CACLC,GAAK,MAAKD,IACVE,MAAOC,IAAAA,SAAAA,QACPC,MAAOD,IAAAA,KAAAA,SACPE,UAAWF,IAAAA,KAAAA,YACXG,SAAUH,IAAAA,KAAAA,YA8BC,SAASI,IACtB,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,WAAS,IA3BnC,SAAoBC,GAClB,MAAMH,EAAN,GAEA,IAAK,IAAII,EAAT,EAAgBA,EAwBhB,GAxBkCA,IAChCJ,EAAAA,GAAUT,EAAVS,GAGF,SAoBuCK,MAChCC,EAAWC,IAAgBL,EAAAA,EAAAA,WAAlC,GAaA,OACE,iCACE,cACEd,QADF,EAEEY,KAFF,EAGEd,aAHF,EAIEsB,aAJF,EAKEC,UALF,GAMEC,SAnBNC,eAAA,GACE,GAAIL,IArBR,UAAoB,cAAEM,IACpB,OAAOA,EAAAA,UAAAA,IAAgCA,EAAAA,aAA6BA,EAApE,aAoBoBC,CAAlB,GAAqC,OAErCN,GAAAA,GAEA,MAAMO,QAA6B,GArBvC,EAqB2Cd,EAAvC,OApBK,IAAIe,SAASC,IAClB,MAAMF,EAAN,GAEA,IAAK,IAAIV,EAAT,EAAgBA,EAiBmB,GAjBDA,IAChCU,EAAAA,GAAavB,EAAwBa,EAArCU,GAGFG,YAAW,IAAMD,EAAP,IAAVC,SARJ,MAuBIhB,EAAQ,SAARA,IACAM,GAAAA,IAYIW,UAPF,cASCZ,IAAa,gBAAKY,UA5GzB,UA4GoB,qC","sources":["webpack://react-data-grid/website/demos/InfiniteScrolling.tsx"],"sourcesContent":["import faker from 'faker';\nimport { useState } from 'react';\nimport { css } from '@linaria/core';\nimport DataGrid from '../../src';\nimport type { Column } from '../../src';\n\nconst loadMoreRowsClassname = css`\n  width: 180px;\n  padding: 8px 16px;\n  position: absolute;\n  bottom: 8px;\n  right: 8px;\n  color: white;\n  line-height: 35px;\n  background: rgb(0 0 0 / 0.6);\n`;\n\ninterface Row {\n  id: string;\n  email: string;\n  title: string;\n  firstName: string;\n  lastName: string;\n}\n\nfunction rowKeyGetter(row: Row) {\n  return row.id;\n}\n\nconst columns: readonly Column<Row>[] = [\n  {\n    key: 'id',\n    name: 'ID'\n  },\n  {\n    key: 'title',\n    name: 'Title'\n  },\n  {\n    key: 'firstName',\n    name: 'First Name'\n  },\n  {\n    key: 'lastName',\n    name: 'Last Name'\n  },\n  {\n    key: 'email',\n    name: 'Email'\n  }\n];\n\nfunction createFakeRowObjectData(index: number): Row {\n  return {\n    id: `id_${index}`,\n    email: faker.internet.email(),\n    title: faker.name.prefix(),\n    firstName: faker.name.firstName(),\n    lastName: faker.name.lastName()\n  };\n}\n\nfunction createRows(numberOfRows: number): Row[] {\n  const rows: Row[] = [];\n\n  for (let i = 0; i < numberOfRows; i++) {\n    rows[i] = createFakeRowObjectData(i);\n  }\n\n  return rows;\n}\n\nfunction isAtBottom({ currentTarget }: React.UIEvent<HTMLDivElement>): boolean {\n  return currentTarget.scrollTop + 10 >= currentTarget.scrollHeight - currentTarget.clientHeight;\n}\n\nfunction loadMoreRows(newRowsCount: number, length: number): Promise<Row[]> {\n  return new Promise((resolve) => {\n    const newRows: Row[] = [];\n\n    for (let i = 0; i < newRowsCount; i++) {\n      newRows[i] = createFakeRowObjectData(i + length);\n    }\n\n    setTimeout(() => resolve(newRows), 1000);\n  });\n}\n\nexport default function InfiniteScrolling() {\n  const [rows, setRows] = useState(() => createRows(50));\n  const [isLoading, setIsLoading] = useState(false);\n\n  async function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    if (isLoading || !isAtBottom(event)) return;\n\n    setIsLoading(true);\n\n    const newRows = await loadMoreRows(50, rows.length);\n\n    setRows([...rows, ...newRows]);\n    setIsLoading(false);\n  }\n\n  return (\n    <>\n      <DataGrid\n        columns={columns}\n        rows={rows}\n        rowKeyGetter={rowKeyGetter}\n        onRowsChange={setRows}\n        rowHeight={30}\n        onScroll={handleScroll}\n        className=\"fill-grid\"\n      />\n      {isLoading && <div className={loadMoreRowsClassname}>Loading more rows...</div>}\n    </>\n  );\n}\n"],"names":["rowKeyGetter","row","columns","key","name","createFakeRowObjectData","index","id","email","faker","title","firstName","lastName","InfiniteScrolling","rows","setRows","useState","numberOfRows","i","createRows","isLoading","setIsLoading","onRowsChange","rowHeight","onScroll","async","currentTarget","isAtBottom","newRows","Promise","resolve","setTimeout","className"],"sourceRoot":""}