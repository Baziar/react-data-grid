{"version":3,"file":"9b5f05b169737e2d5aca.js","mappings":"gMAeA,MAAMA,EAAyB,CAC7B,CACEC,IAAK,KACLC,KAAM,KACNC,MAAO,IAET,CACEF,IAAK,OACLC,KAAM,SAER,CACED,IAAK,WACLC,KAAM,YAER,CACED,IAAK,YACLC,KAAM,cAER,CACED,IAAK,WACLC,KAAM,cAER,CACED,IAAK,YACLC,KAAM,cAER,CACED,IAAK,eACLC,KAAM,oBACNC,MAAO,MAIX,SAASC,EAAcC,EAAaC,GAClC,OAAO,IAAIC,KACTF,EAAMG,UAAYC,KAAKC,UAAYJ,EAAIE,UAAYH,EAAMG,YACzDG,qBAGJ,SAASC,IACP,MAAMC,EAAO,GACb,IAAK,IAAIC,EAAI,EAAGA,EAAI,IAAKA,IACvBD,EAAKE,KAAK,CACRC,GAAIF,EACJG,KAAO,QAAOH,IACdI,SAAUT,KAAKU,IAAI,IAAKV,KAAKW,MAAsB,IAAhBX,KAAKC,WACxCW,SAAU,CAAC,WAAY,OAAQ,SAAU,OAAOZ,KAAKa,MAAsB,EAAhBb,KAAKC,SAAe,IAC/Ea,UAAW,CAAC,MAAO,cAAe,OAAQ,SAASd,KAAKa,MAAsB,EAAhBb,KAAKC,SAAe,IAClFc,UAAWpB,EAAc,IAAIG,KAAK,KAAM,EAAG,GAAI,IAAIA,MACnDkB,aAAcrB,EAAc,IAAIG,KAAQ,IAAIA,KAAK,KAAM,EAAG,MAI9D,OAAOM,EAGM,SAASa,IACtB,MAAOb,IAAQc,EAAAA,EAAAA,UAASf,IACjBgB,EAAmBC,IAAyBF,EAAAA,EAAAA,UAA6B,cAEhF,OACE,iCACE,iBAAKG,MAAO,CAAEC,aAAc,GAA5B,oCAEE,8BACE,kBACEC,KAAK,QACL9B,KAAK,OACL+B,QAA+B,SAAtBL,EACTM,SAAU,IAAML,EAAsB,UAL1C,WASA,8BACE,kBACEG,KAAK,QACL9B,KAAK,OACL+B,QAA+B,eAAtBL,EACTM,SAAU,IAAML,EAAsB,gBAL1C,iBASA,8BACE,kBACEG,KAAK,QACL9B,KAAK,OACL+B,QAA+B,kBAAtBL,EACTM,SAAU,IAAML,EAAsB,mBAL1C,uBAUF,SAAC,IAAD,CAAU7B,QAASA,EAASa,KAAMA,EAAMsB,mBAAoBP,S,gBC3GlE,SAASQ,EAAMC,GACd,IAAIC,EAAGC,EAAGC,EAAI,GAEd,GAAmB,iBAARH,GAAmC,iBAARA,EACrCG,GAAOH,OACD,GAAmB,iBAARA,EACjB,GAAII,MAAMC,QAAQL,GACjB,IAAKC,EAAE,EAAGA,EAAID,EAAIM,OAAQL,IACrBD,EAAIC,KACHC,EAAIH,EAAMC,EAAIC,OACjBE,IAAQA,GAAO,KACfA,GAAOD,QAKV,IAAKD,KAAKD,EACLA,EAAIC,KACPE,IAAQA,GAAO,KACfA,GAAOF,GAMX,OAAOE,EAGO,SAAS,IAEvB,IADA,IAASI,EAAKC,EAAV/B,EAAE,EAAW0B,EAAI,GACd1B,EAAIgC,UAAUH,SAChBC,EAAME,UAAUhC,QACf+B,EAAIT,EAAMQ,MACbJ,IAAQA,GAAO,KACfA,GAAOK,GAIV,OAAOL,E","sources":["webpack://react-data-grid/./website/demos/CellNavigation.tsx","webpack://react-data-grid/./node_modules/clsx/dist/clsx.m.js"],"sourcesContent":["import { useState } from 'react';\n\nimport DataGrid from '../../src';\nimport type { Column, CellNavigationMode } from '../../src';\n\ninterface Row {\n  id: number;\n  task: string;\n  complete: number;\n  priority: string;\n  issueType: string;\n  startDate: string;\n  completeDate: string;\n}\n\nconst columns: Column<Row>[] = [\n  {\n    key: 'id',\n    name: 'ID',\n    width: 80\n  },\n  {\n    key: 'task',\n    name: 'Title'\n  },\n  {\n    key: 'priority',\n    name: 'Priority'\n  },\n  {\n    key: 'issueType',\n    name: 'Issue Type'\n  },\n  {\n    key: 'complete',\n    name: '% Complete'\n  },\n  {\n    key: 'startDate',\n    name: 'Start Date'\n  },\n  {\n    key: 'completeDate',\n    name: 'Expected Complete',\n    width: 200\n  }\n];\n\nfunction getRandomDate(start: Date, end: Date) {\n  return new Date(\n    start.getTime() + Math.random() * (end.getTime() - start.getTime())\n  ).toLocaleDateString();\n}\n\nfunction createRows(): Row[] {\n  const rows = [];\n  for (let i = 1; i < 500; i++) {\n    rows.push({\n      id: i,\n      task: `Task ${i}`,\n      complete: Math.min(100, Math.round(Math.random() * 110)),\n      priority: ['Critical', 'High', 'Medium', 'Low'][Math.floor(Math.random() * 3 + 1)],\n      issueType: ['Bug', 'Improvement', 'Epic', 'Story'][Math.floor(Math.random() * 3 + 1)],\n      startDate: getRandomDate(new Date(2015, 3, 1), new Date()),\n      completeDate: getRandomDate(new Date(), new Date(2016, 0, 1))\n    });\n  }\n\n  return rows;\n}\n\nexport default function CellNavigation() {\n  const [rows] = useState(createRows);\n  const [cellNavigatioMode, setCellNavigationMode] = useState<CellNavigationMode>('CHANGE_ROW');\n\n  return (\n    <>\n      <div style={{ marginBottom: 5 }}>\n        Cell Navigation Modes:\n        <label>\n          <input\n            type=\"radio\"\n            name=\"mode\"\n            checked={cellNavigatioMode === 'NONE'}\n            onChange={() => setCellNavigationMode('NONE')}\n          />\n          None\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"mode\"\n            checked={cellNavigatioMode === 'CHANGE_ROW'}\n            onChange={() => setCellNavigationMode('CHANGE_ROW')}\n          />\n          Change Row\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"mode\"\n            checked={cellNavigatioMode === 'LOOP_OVER_ROW'}\n            onChange={() => setCellNavigationMode('LOOP_OVER_ROW')}\n          />\n          Loop Over Row\n        </label>\n      </div>\n      <DataGrid columns={columns} rows={rows} cellNavigationMode={cellNavigatioMode} />\n    </>\n  );\n}\n","function toVal(mix) {\n\tvar k, y, str='';\n\n\tif (typeof mix === 'string' || typeof mix === 'number') {\n\t\tstr += mix;\n\t} else if (typeof mix === 'object') {\n\t\tif (Array.isArray(mix)) {\n\t\t\tfor (k=0; k < mix.length; k++) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tif (y = toVal(mix[k])) {\n\t\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\t\tstr += y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (k in mix) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\tstr += k;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn str;\n}\n\nexport default function () {\n\tvar i=0, tmp, x, str='';\n\twhile (i < arguments.length) {\n\t\tif (tmp = arguments[i++]) {\n\t\t\tif (x = toVal(tmp)) {\n\t\t\t\tstr && (str += ' ');\n\t\t\t\tstr += x\n\t\t\t}\n\t\t}\n\t}\n\treturn str;\n}\n"],"names":["columns","key","name","width","getRandomDate","start","end","Date","getTime","Math","random","toLocaleDateString","createRows","rows","i","push","id","task","complete","min","round","priority","floor","issueType","startDate","completeDate","CellNavigation","useState","cellNavigatioMode","setCellNavigationMode","style","marginBottom","type","checked","onChange","cellNavigationMode","toVal","mix","k","y","str","Array","isArray","length","tmp","x","arguments"],"sourceRoot":""}