{"version":3,"file":"6420a834f348a42fef68.js","mappings":"iMAOA,MAAMA,EAAuB,IAAIC,MAAAA,KAAjC,QAQA,SAASC,EAAcC,GACrB,OACE,gCACGA,EAAAA,OAAD,IADF,IAC4BA,EAAD,OAKhB,SAASC,IACtB,MAAMC,GAAUC,EAAAA,EAAAA,UAAQ,KACtB,MAAMD,EAAN,GAEA,IAAK,IAAIE,EAAT,EAAgBA,EAAhB,GAAwBA,IAAK,CAC3B,MAAMC,EAAMC,OAAZ,GACAJ,EAAAA,KAAa,OAEXK,KAFW,EAGXC,OAAQJ,EAHG,EAIXK,WAJW,EAKXC,UALW,EAMXC,QAAQC,GACN,WAAIA,EAAAA,KAAqB,CACvB,GAAIP,MAAAA,GAAJ,IAAmBO,EAAAA,IAAgB,OAAO,EAC1C,GAAIP,MAAAA,GAAJ,IAAmBO,EAAAA,IAAgB,OAFZ,EAGvB,GAAIP,MAAAA,GAAJ,IAAmBO,EAAAA,IAAgB,OAAO,EAC1C,GAAIP,OAAAA,GAAJ,IAAoBO,EAAAA,IAAgB,OAAO,EAC3C,GAAIP,MAAAA,GAAeO,EAAAA,IAAnB,EAAiC,OAAO,EAE1C,GAAIA,WAAAA,EAAAA,MAAJ,MAA8BP,EAC5B,UAIJQ,UAAUC,GACR,GACGT,MAAAA,GAAD,IAAgBS,GACfT,MAAAA,GADD,IACgBS,GACfT,OAAAA,GAFD,IAEiBS,GAChBT,MAAAA,GAAeS,EAJlB,EAME,MA9CZ,cAqDI,WAtCF,IAyCA,OAAO,cAAUZ,QAAV,EAA4BL,KAA5B,EAAwCkB,UAAxC,GAAuDC,UAA9D,c,0BCjEF,SAASC,EAAMC,GACd,IAAIC,EAAGC,EAAGC,EAAI,GAEd,GAAmB,iBAARH,GAAmC,iBAARA,EACrCG,GAAOH,OACD,GAAmB,iBAARA,EACjB,GAAIpB,MAAMwB,QAAQJ,GACjB,IAAKC,EAAE,EAAGA,EAAID,EAAIK,OAAQJ,IACrBD,EAAIC,KACHC,EAAIH,EAAMC,EAAIC,OACjBE,IAAQA,GAAO,KACfA,GAAOD,QAKV,IAAKD,KAAKD,EACLA,EAAIC,KACPE,IAAQA,GAAO,KACfA,GAAOF,GAMX,OAAOE,EAGO,SAAS,IAEvB,IADA,IAASG,EAAKC,EAAVrB,EAAE,EAAWiB,EAAI,GACdjB,EAAIsB,UAAUH,SAChBC,EAAME,UAAUtB,QACfqB,EAAIR,EAAMO,MACbH,IAAQA,GAAO,KACfA,GAAOI,GAIV,OAAOJ,E","sources":["webpack://react-data-grid/website/demos/ColumnSpanning.tsx","webpack://react-data-grid/./node_modules/clsx/dist/clsx.m.js"],"sourcesContent":["import { useMemo } from 'react';\nimport { css } from '@linaria/core';\n\nimport DataGrid from '../../src';\nimport type { Column, FormatterProps } from '../../src';\n\ntype Row = number;\nconst rows: readonly Row[] = [...Array(100).keys()];\n\nconst colSpanClassname = css`\n  background-color: #ffb300;\n  color: black;\n  text-align: center;\n`;\n\nfunction CellFormatter(props: FormatterProps<Row>) {\n  return (\n    <>\n      {props.column.key}&times;{props.row}\n    </>\n  );\n}\n\nexport default function ColumnSpanning() {\n  const columns = useMemo((): readonly Column<Row>[] => {\n    const columns: Column<Row>[] = [];\n\n    for (let i = 0; i < 30; i++) {\n      const key = String(i);\n      columns.push({\n        key,\n        name: key,\n        frozen: i < 5,\n        resizable: true,\n        formatter: CellFormatter,\n        colSpan(args) {\n          if (args.type === 'ROW') {\n            if (key === '2' && args.row === 2) return 3;\n            if (key === '4' && args.row === 4) return 6; // Will not work as colspan includes both frozen and regular columns\n            if (key === '0' && args.row === 5) return 5;\n            if (key === '27' && args.row === 8) return 3;\n            if (key === '6' && args.row < 8) return 2;\n          }\n          if (args.type === 'HEADER' && key === '8') {\n            return 3;\n          }\n          return undefined;\n        },\n        cellClass(row) {\n          if (\n            (key === '0' && row === 5) ||\n            (key === '2' && row === 2) ||\n            (key === '27' && row === 8) ||\n            (key === '6' && row < 8)\n          ) {\n            return colSpanClassname;\n          }\n          return undefined;\n        }\n      });\n    }\n\n    return columns;\n  }, []);\n\n  return <DataGrid columns={columns} rows={rows} rowHeight={22} className=\"fill-grid\" />;\n}\n","function toVal(mix) {\n\tvar k, y, str='';\n\n\tif (typeof mix === 'string' || typeof mix === 'number') {\n\t\tstr += mix;\n\t} else if (typeof mix === 'object') {\n\t\tif (Array.isArray(mix)) {\n\t\t\tfor (k=0; k < mix.length; k++) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tif (y = toVal(mix[k])) {\n\t\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\t\tstr += y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (k in mix) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\tstr += k;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn str;\n}\n\nexport default function () {\n\tvar i=0, tmp, x, str='';\n\twhile (i < arguments.length) {\n\t\tif (tmp = arguments[i++]) {\n\t\t\tif (x = toVal(tmp)) {\n\t\t\t\tstr && (str += ' ');\n\t\t\t\tstr += x\n\t\t\t}\n\t\t}\n\t}\n\treturn str;\n}\n"],"names":["rows","Array","CellFormatter","props","ColumnSpanning","columns","useMemo","i","key","String","name","frozen","resizable","formatter","colSpan","args","cellClass","row","rowHeight","className","toVal","mix","k","y","str","isArray","length","tmp","x","arguments"],"sourceRoot":""}