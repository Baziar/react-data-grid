{"version":3,"file":"42b1387153b5aba9e7af.js","mappings":"4MAIA,SAASA,IACP,OACE,iBAAKC,MAAO,CAAEC,UAAW,UAAzB,4BACkB,KAChB,iBAAMC,KAAK,KAAKC,MAAM,QAAtB,wBAaN,MAAMC,EAAkC,CACtCC,EAAAA,EACA,CAAEC,IAAK,KAAMC,KAAM,MACnB,CAAED,IAAK,QAASC,KAAM,SACtB,CAAED,IAAK,QAASC,KAAM,UAGlBC,EAAuB,GAE7B,SAASC,EAAaC,GACpB,OAAOA,EAAIC,GAGE,SAASC,IACtB,MAAOC,EAAcC,IAAwBC,EAAAA,EAAAA,WAAS,IAA2B,IAAIC,MAErF,OACE,SAAC,IAAD,CACEZ,QAASA,EACTI,KAAMA,EACNS,gBAAgB,SAAClB,EAAD,IAChBc,aAAcA,EACdC,qBAAsBA,EACtBL,aAAcA,EACdS,UAAU,iB,gBC7ChB,SAASC,EAAMC,GACd,IAAIC,EAAGC,EAAGC,EAAI,GAEd,GAAmB,iBAARH,GAAmC,iBAARA,EACrCG,GAAOH,OACD,GAAmB,iBAARA,EACjB,GAAII,MAAMC,QAAQL,GACjB,IAAKC,EAAE,EAAGA,EAAID,EAAIM,OAAQL,IACrBD,EAAIC,KACHC,EAAIH,EAAMC,EAAIC,OACjBE,IAAQA,GAAO,KACfA,GAAOD,QAKV,IAAKD,KAAKD,EACLA,EAAIC,KACPE,IAAQA,GAAO,KACfA,GAAOF,GAMX,OAAOE,EAGO,SAAS,IAEvB,IADA,IAASI,EAAKC,EAAVC,EAAE,EAAWN,EAAI,GACdM,EAAIC,UAAUJ,SAChBC,EAAMG,UAAUD,QACfD,EAAIT,EAAMQ,MACbJ,IAAQA,GAAO,KACfA,GAAOK,GAIV,OAAOL,E","sources":["webpack://react-data-grid/./website/demos/NoRows.tsx","webpack://react-data-grid/./node_modules/clsx/dist/clsx.m.js"],"sourcesContent":["import { useState } from 'react';\nimport DataGrid, { SelectColumn } from '../../src';\nimport type { Column } from '../../src';\n\nfunction EmptyRowsRenderer() {\n  return (\n    <div style={{ textAlign: 'center' }}>\n      Nothing to show{' '}\n      <span lang=\"ja\" title=\"ショボーン\">\n        (´・ω・`)\n      </span>\n    </div>\n  );\n}\n\ninterface Row {\n  id: number;\n  title: string;\n  count: number;\n}\n\nconst columns: readonly Column<Row>[] = [\n  SelectColumn,\n  { key: 'id', name: 'ID' },\n  { key: 'title', name: 'Title' },\n  { key: 'count', name: 'Count' }\n];\n\nconst rows: readonly Row[] = [];\n\nfunction rowKeyGetter(row: Row) {\n  return row.id;\n}\n\nexport default function NoRows() {\n  const [selectedRows, onSelectedRowsChange] = useState((): ReadonlySet<number> => new Set());\n\n  return (\n    <DataGrid\n      columns={columns}\n      rows={rows}\n      noRowsFallback={<EmptyRowsRenderer />}\n      selectedRows={selectedRows}\n      onSelectedRowsChange={onSelectedRowsChange}\n      rowKeyGetter={rowKeyGetter}\n      className=\"small-grid\"\n    />\n  );\n}\n","function toVal(mix) {\n\tvar k, y, str='';\n\n\tif (typeof mix === 'string' || typeof mix === 'number') {\n\t\tstr += mix;\n\t} else if (typeof mix === 'object') {\n\t\tif (Array.isArray(mix)) {\n\t\t\tfor (k=0; k < mix.length; k++) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tif (y = toVal(mix[k])) {\n\t\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\t\tstr += y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (k in mix) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\tstr += k;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn str;\n}\n\nexport default function () {\n\tvar i=0, tmp, x, str='';\n\twhile (i < arguments.length) {\n\t\tif (tmp = arguments[i++]) {\n\t\t\tif (x = toVal(tmp)) {\n\t\t\t\tstr && (str += ' ');\n\t\t\t\tstr += x\n\t\t\t}\n\t\t}\n\t}\n\treturn str;\n}\n"],"names":["EmptyRowsRenderer","style","textAlign","lang","title","columns","SelectColumn","key","name","rows","rowKeyGetter","row","id","NoRows","selectedRows","onSelectedRowsChange","useState","Set","noRowsFallback","className","toVal","mix","k","y","str","Array","isArray","length","tmp","x","i","arguments"],"sourceRoot":""}