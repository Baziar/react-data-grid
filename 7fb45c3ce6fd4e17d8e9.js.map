{"version":3,"file":"7fb45c3ce6fd4e17d8e9.js","mappings":"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","sources":["webpack://react-data-grid/src/editors/TextEditor.tsx","webpack://react-data-grid/./website/demos/components/Editors/DropDownEditor.tsx","webpack://react-data-grid/website/demos/components/Formatters/ImageFormatter.tsx","webpack://react-data-grid/website/demos/AllFeatures.tsx"],"sourcesContent":["import { css } from '@linaria/core';\nimport type { EditorProps } from '../types';\n\nconst textEditor = css`\n  appearance: none;\n\n  box-sizing: border-box;\n  width: 100%;\n  height: 100%;\n  padding: 0px 6px 0 6px;\n  border: 2px solid #ccc;\n  vertical-align: top;\n  color: var(--color);\n  background-color: var(--background-color);\n\n  font-family: inherit;\n  font-size: var(--font-size);\n\n  &:focus {\n    border-color: var(--selection-color);\n    outline: none;\n  }\n\n  &::placeholder {\n    color: #999;\n    opacity: 1;\n  }\n`;\n\nexport const textEditorClassname = `rdg-text-editor ${textEditor}`;\n\nfunction autoFocusAndSelect(input: HTMLInputElement | null) {\n  input?.focus();\n  input?.select();\n}\n\nexport default function TextEditor<TRow, TSummaryRow>({\n  row,\n  column,\n  onRowChange,\n  onClose\n}: EditorProps<TRow, TSummaryRow>) {\n  return (\n    <input\n      className={textEditorClassname}\n      ref={autoFocusAndSelect}\n      value={row[column.key as keyof TRow] as unknown as string}\n      onChange={(event) => onRowChange({ ...row, [column.key]: event.target.value })}\n      onBlur={() => onClose(true)}\n    />\n  );\n}\n","import { textEditorClassname } from '../../../../src/editors/TextEditor';\nimport type { EditorProps } from '../../../../src';\nimport type { Row } from '../../AllFeatures';\n\nconst titles = ['Dr.', 'Mr.', 'Mrs.', 'Miss', 'Ms.'] as const;\n\nexport default function DropDownEditor({ row, onRowChange }: EditorProps<Row>) {\n  return (\n    <select\n      className={textEditorClassname}\n      value={row.title}\n      onChange={(event) => onRowChange({ ...row, title: event.target.value }, true)}\n      autoFocus\n    >\n      {titles.map((title) => (\n        <option key={title} value={title}>\n          {title}\n        </option>\n      ))}\n    </select>\n  );\n}\n","import { css } from '@linaria/core';\n\nconst wrapperClassname = css`\n  display: flex;\n  justify-content: space-around;\n`;\n\nconst imageCellClassname = css`\n  background: #efefef;\n  background-size: 100%;\n  display: inline-block;\n  height: 28px;\n  width: 28px;\n  vertical-align: middle;\n  background-position: center;\n`;\n\ninterface Props {\n  /** image url, used as background-image */\n  value: string;\n}\n\nexport function ImageFormatter({ value }: Props) {\n  return (\n    <div className={wrapperClassname}>\n      <div className={imageCellClassname} style={{ backgroundImage: `url(${value})` }} />\n    </div>\n  );\n}\n","import faker from 'faker';\nimport { useState } from 'react';\nimport { css } from '@linaria/core';\nimport DataGrid, { SelectColumn, TextEditor } from '../../src';\nimport type { Column, FillEvent, PasteEvent } from '../../src';\nimport DropDownEditor from './components/Editors/DropDownEditor';\nimport { ImageFormatter } from './components/Formatters';\n\nconst highlightClassname = css`\n  .rdg-cell {\n    background-color: #9370db;\n    color: white;\n  }\n\n  &:hover .rdg-cell {\n    background-color: #800080;\n  }\n`;\n\nexport interface Row {\n  id: string;\n  avatar: string;\n  email: string;\n  title: string;\n  firstName: string;\n  lastName: string;\n  street: string;\n  zipCode: string;\n  date: string;\n  bs: string;\n  catchPhrase: string;\n  companyName: string;\n  words: string;\n  sentence: string;\n}\n\nfunction rowKeyGetter(row: Row) {\n  return row.id;\n}\n\nfaker.locale = 'en_GB';\n\nconst columns: readonly Column<Row>[] = [\n  SelectColumn,\n  {\n    key: 'id',\n    name: 'ID',\n    width: 80,\n    resizable: true,\n    frozen: true\n  },\n  {\n    key: 'avatar',\n    name: 'Avatar',\n    width: 40,\n    resizable: true,\n    headerRenderer: () => <ImageFormatter value={faker.image.cats()} />,\n    formatter: ({ row }) => <ImageFormatter value={row.avatar} />\n  },\n  {\n    key: 'title',\n    name: 'Title',\n    width: 200,\n    resizable: true,\n    formatter(props) {\n      return <>{props.row.title}</>;\n    },\n    editor: DropDownEditor,\n    editorOptions: {\n      editOnClick: true\n    }\n  },\n  {\n    key: 'firstName',\n    name: 'First Name',\n    width: 200,\n    resizable: true,\n    frozen: true,\n    editor: TextEditor\n  },\n  {\n    key: 'lastName',\n    name: 'Last Name',\n    width: 200,\n    resizable: true,\n    frozen: true,\n    editor: TextEditor\n  },\n  {\n    key: 'email',\n    name: 'Email',\n    width: 200,\n    resizable: true,\n    editor: TextEditor\n  },\n  {\n    key: 'street',\n    name: 'Street',\n    width: 200,\n    resizable: true,\n    editor: TextEditor\n  },\n  {\n    key: 'zipCode',\n    name: 'ZipCode',\n    width: 200,\n    resizable: true,\n    editor: TextEditor\n  },\n  {\n    key: 'date',\n    name: 'Date',\n    width: 200,\n    resizable: true,\n    editor: TextEditor\n  },\n  {\n    key: 'bs',\n    name: 'bs',\n    width: 200,\n    resizable: true,\n    editor: TextEditor\n  },\n  {\n    key: 'catchPhrase',\n    name: 'Catch Phrase',\n    width: 200,\n    resizable: true,\n    editor: TextEditor\n  },\n  {\n    key: 'companyName',\n    name: 'Company Name',\n    width: 200,\n    resizable: true,\n    editor: TextEditor\n  },\n  {\n    key: 'sentence',\n    name: 'Sentence',\n    width: 200,\n    resizable: true,\n    editor: TextEditor\n  }\n];\n\nfunction createRows(): Row[] {\n  const rows: Row[] = [];\n\n  for (let i = 0; i < 2000; i++) {\n    rows.push({\n      id: `id_${i}`,\n      avatar: faker.image.avatar(),\n      email: faker.internet.email(),\n      title: faker.name.prefix(),\n      firstName: faker.name.firstName(),\n      lastName: faker.name.lastName(),\n      street: faker.address.streetName(),\n      zipCode: faker.address.zipCode(),\n      date: faker.date.past().toLocaleDateString(),\n      bs: faker.company.bs(),\n      catchPhrase: faker.company.catchPhrase(),\n      companyName: faker.company.companyName(),\n      words: faker.lorem.words(),\n      sentence: faker.lorem.sentence()\n    });\n  }\n\n  return rows;\n}\n\nexport default function AllFeatures() {\n  const [rows, setRows] = useState(createRows);\n  const [selectedRows, setSelectedRows] = useState<ReadonlySet<string>>(() => new Set());\n\n  function handleFill({ columnKey, sourceRow, targetRow }: FillEvent<Row>): Row {\n    return { ...targetRow, [columnKey]: sourceRow[columnKey as keyof Row] };\n  }\n\n  function handlePaste({\n    sourceColumnKey,\n    sourceRow,\n    targetColumnKey,\n    targetRow\n  }: PasteEvent<Row>): Row {\n    const incompatibleColumns = ['email', 'zipCode', 'date'];\n    if (\n      sourceColumnKey === 'avatar' ||\n      ['id', 'avatar'].includes(targetColumnKey) ||\n      ((incompatibleColumns.includes(targetColumnKey) ||\n        incompatibleColumns.includes(sourceColumnKey)) &&\n        sourceColumnKey !== targetColumnKey)\n    ) {\n      return targetRow;\n    }\n\n    return { ...targetRow, [targetColumnKey]: sourceRow[sourceColumnKey as keyof Row] };\n  }\n\n  return (\n    <>\n      <DataGrid\n        columns={columns}\n        rows={rows}\n        rowKeyGetter={rowKeyGetter}\n        onRowsChange={setRows}\n        onFill={handleFill}\n        onPaste={handlePaste}\n        rowHeight={30}\n        selectedRows={selectedRows}\n        onSelectedRowsChange={setSelectedRows}\n        className=\"fill-grid\"\n        rowClass={(row) => (row.id.includes('7') ? highlightClassname : undefined)}\n      />\n    </>\n  );\n}\n"],"names":["textEditorClassname","autoFocusAndSelect","input","TextEditor","onClose","className","ref","value","row","column","onChange","event","onRowChange","onBlur","titles","ImageFormatter","style","backgroundImage","rowKeyGetter","faker","columns","key","name","width","resizable","frozen","headerRenderer","formatter","props","editor","title","target","autoFocus","map","editorOptions","editOnClick","createRows","rows","i","id","avatar","email","firstName","lastName","street","zipCode","date","bs","catchPhrase","companyName","words","sentence","AllFeatures","setRows","useState","selectedRows","setSelectedRows","onRowsChange","onFill","targetRow","sourceRow","columnKey","onPaste","incompatibleColumns","sourceColumnKey","includes","rowHeight","onSelectedRowsChange","rowClass"],"sourceRoot":""}