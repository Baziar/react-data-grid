{"version":3,"file":"067f2989e4580d8c66c0.js","mappings":"iMAUA,MAAMA,EAAkC,CACtC,CAAEC,IAAK,KAAMC,KAAM,MACnB,CAAED,IAAK,QAASC,KAAM,SACtB,CAAED,IAAK,QAASC,KAAM,UAGT,SAASC,IACtB,MAAOC,IAAQC,EAAAA,EAAAA,WAAS,KACtB,MAAMD,EAAc,GAEpB,IAAK,IAAIE,EAAI,EAAGA,EAAI,IAAMA,IACxBF,EAAKG,KAAK,CACRC,GAAIF,EACJG,MAAQ,SAAQH,IAChBI,MAAW,IAAJJ,IAIX,OAAOF,MAEFO,EAAOC,IAAYP,EAAAA,EAAAA,UAAS,MAC7BQ,GAAUC,EAAAA,EAAAA,QAAuB,MAEvC,OACE,iCACE,iBAAKC,MAAO,CAAEC,aAAc,GAA5B,WACE,iBAAMD,MAAO,CAAEE,YAAa,GAA5B,0BACA,kBACEF,MAAO,CAAEG,MAAO,IAChBC,KAAK,SACLR,MAAOA,EACPS,SAAWC,GAAUT,EAASS,EAAMC,OAAOX,UAE7C,mBAAQQ,KAAK,SAASI,QAAS,IAAMV,EAAQW,QAASC,YAAYC,OAAOf,IAAzE,+BAIF,SAAC,IAAD,CAAUgB,IAAKd,EAASb,QAASA,EAASI,KAAMA,S,gBC/CtD,SAASwB,EAAMC,GACd,IAAIC,EAAGC,EAAGC,EAAI,GAEd,GAAmB,iBAARH,GAAmC,iBAARA,EACrCG,GAAOH,OACD,GAAmB,iBAARA,EACjB,GAAII,MAAMC,QAAQL,GACjB,IAAKC,EAAE,EAAGA,EAAID,EAAIM,OAAQL,IACrBD,EAAIC,KACHC,EAAIH,EAAMC,EAAIC,OACjBE,IAAQA,GAAO,KACfA,GAAOD,QAKV,IAAKD,KAAKD,EACLA,EAAIC,KACPE,IAAQA,GAAO,KACfA,GAAOF,GAMX,OAAOE,EAGO,SAAS,IAEvB,IADA,IAASI,EAAKC,EAAV/B,EAAE,EAAW0B,EAAI,GACd1B,EAAIgC,UAAUH,SAChBC,EAAME,UAAUhC,QACf+B,EAAIT,EAAMQ,MACbJ,IAAQA,GAAO,KACfA,GAAOK,GAIV,OAAOL,E","sources":["webpack://react-data-grid/./website/demos/ScrollToRow.tsx","webpack://react-data-grid/./node_modules/clsx/dist/clsx.m.js"],"sourcesContent":["import { useState, useRef } from 'react';\nimport DataGrid from '../../src';\nimport type { Column, DataGridHandle } from '../../src';\n\ninterface Row {\n  id: number;\n  title: string;\n  count: number;\n}\n\nconst columns: readonly Column<Row>[] = [\n  { key: 'id', name: 'ID' },\n  { key: 'title', name: 'Title' },\n  { key: 'count', name: 'Count' }\n];\n\nexport default function ScrollToRow() {\n  const [rows] = useState(() => {\n    const rows: Row[] = [];\n\n    for (let i = 0; i < 1000; i++) {\n      rows.push({\n        id: i,\n        title: `Title ${i}`,\n        count: i * 1000\n      });\n    }\n\n    return rows;\n  });\n  const [value, setValue] = useState('10');\n  const gridRef = useRef<DataGridHandle>(null);\n\n  return (\n    <>\n      <div style={{ marginBottom: 5 }}>\n        <span style={{ marginRight: 5 }}>Row index: </span>\n        <input\n          style={{ width: 50 }}\n          type=\"number\"\n          value={value}\n          onChange={(event) => setValue(event.target.value)}\n        />\n        <button type=\"button\" onClick={() => gridRef.current!.scrollToRow(Number(value))}>\n          Scroll to row\n        </button>\n      </div>\n      <DataGrid ref={gridRef} columns={columns} rows={rows} />\n    </>\n  );\n}\n","function toVal(mix) {\n\tvar k, y, str='';\n\n\tif (typeof mix === 'string' || typeof mix === 'number') {\n\t\tstr += mix;\n\t} else if (typeof mix === 'object') {\n\t\tif (Array.isArray(mix)) {\n\t\t\tfor (k=0; k < mix.length; k++) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tif (y = toVal(mix[k])) {\n\t\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\t\tstr += y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (k in mix) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\tstr += k;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn str;\n}\n\nexport default function () {\n\tvar i=0, tmp, x, str='';\n\twhile (i < arguments.length) {\n\t\tif (tmp = arguments[i++]) {\n\t\t\tif (x = toVal(tmp)) {\n\t\t\t\tstr && (str += ' ');\n\t\t\t\tstr += x\n\t\t\t}\n\t\t}\n\t}\n\treturn str;\n}\n"],"names":["columns","key","name","ScrollToRow","rows","useState","i","push","id","title","count","value","setValue","gridRef","useRef","style","marginBottom","marginRight","width","type","onChange","event","target","onClick","current","scrollToRow","Number","ref","toVal","mix","k","y","str","Array","isArray","length","tmp","x","arguments"],"sourceRoot":""}